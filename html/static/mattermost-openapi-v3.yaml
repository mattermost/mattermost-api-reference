swagger: '2.0'
info:
  description: |
    The Mattermost Web Services API is used by Mattermost clients and third party applications to interact with the server. [JavaScript and Golang drivers, along with a Golang bot sample](https://api.mattermost.com/#tag/drivers) connecting to the APIs are also available.

    This is the API reference for the [master branch](https://github.com/mattermost/platform) of the Mattermost server and will be the basis for the next version of Mattermost. For the most recent release of Mattermost see the [API reference here](https://api.mattermost.com).

    ### Changelog

    The [Mattermost server changelog](https://docs.mattermost.com/administration/changelog.html) documents API changes since Mattermost server v3.2:

    * [Changes to Mattermost Server 3.5 API from 3.4 API](https://docs.mattermost.com/administration/changelog.html#api-changes-from-v3-4-to-v3-5)
    * [Changes to Mattermost Server 3.4 API from 3.3 API](https://docs.mattermost.com/administration/changelog.html#api-changes-from-v3-3-to-v3-4)
    * [Changes to Mattermost Server 3.3 API from 3.2 API](https://docs.mattermost.com/administration/changelog.html#api-changes-from-v3-2-to-v3-3)

    ### Support

    Mattermost core committers work with the community to keep the API documentation up-to-date.

    If you have questions on API routes not listed in this reference, please [join the Mattermost community server](https://pre-release.mattermost.com/signup_user_complete/?id=f1924a8db44ff3bb41c96424cdc20676) to ask questions in the Developers channel, [or post questions to our Developer Discussion forum](http://forum.mattermost.org/c/dev).

    [Bug reports](https://github.com/mattermost/mattermost-api-reference/issues) in the documentation or the API are also welcome, as are pull requests to fix the issues.

    ### Contributing

    When you have answers to API questions not addressed in our documentation we ask you to consider making a pull request to improve our reference. [Small changes](https://github.com/mattermost/mattermost-api-reference/commit/d574c0c1e95dc2228dc96663afd562f1305e3ece) and [larger changes](https://github.com/mattermost/mattermost-api-reference/commit/1ae3314f0935eebba8c885d8969dcad72f801501) are all welcome.

    We also have [Help Wanted tickets](https://github.com/mattermost/mattermost-api-reference/issues) available for community members who would like to help others more easily use the APIs. We acknowledge everyone's contribution in the [release notes of our next version](https://docs.mattermost.com/administration/changelog.html#contributors).

    The source code for this API reference is hosted at https://github.com/mattermost/mattermost-api-reference.

  version: master
  title: Mattermost API Reference
  termsOfService: 'https://about.mattermost.com/default-terms/'
  contact:
    email: feedback@mattermost.com
  x-logo:
    url: "https://www.mattermost.org/wp-content/uploads/2016/03/logoHorizontal_WS.png"
    backgroundColor: "#FFFFFF"
basePath: /api/v3
host: your-mattermost-url.com
tags:
  - name: schema
    description: All API access is through HTTP(S) requests at `your-mattermost-url.com/api/v3`. All request and response bodies are `application/json`.
  - name: drivers
    description: |
      The easiest way to interact with the Mattermost Web Service API is through a language specific driver. These can be found at the following links:
      
      * [Mattermost JavaScript Driver](https://github.com/mattermost/mattermost-driver-javascript)
      * [Mattermost Golang Driver](https://github.com/mattermost/platform/blob/master/model/client.go)
      
      For an example usage of the Golang driver, please see the [Golang Bot Sample](https://github.com/mattermost/mattermost-bot-sample-golang).
    
  - name: authentication
    description: |
      The majority of the Mattermost API involves interacting with teams. Therefore, most API methods require authentication as a user. There are two ways to authenticate into a Mattermost system.
      
      All examples assume there is a Mattermost instance running at http://localhost:8065.
      
      #### Session Token
      
      Make an HTTP POST to `your-mattermost-url.com/api/v3/users/login` with a JSON body indicating the name of the team, the userâ€™s `login_id`, `password` and optionally the MFA `token`. The `login_id` can be an email, username or an AD/LDAP ID depending on the system's configuration.
      
      ```
      curl -i -d '{"login_id":"someone@nowhere.com","password":"thisisabadpassword"}' http://localhost:8065/api/v3/users/login
      ```
      
      If successful, the response will contain a `Token` header and a user object in the body.
      
      ```
      HTTP/1.1 200 OK
      Set-Cookie: MMSID=hyr5dmb1mbb49c44qmx4whniso; Path=/; Max-Age=2592000; HttpOnly
      Token: hyr5dmb1mbb49c44qmx4whniso
      X-Ratelimit-Limit: 10
      X-Ratelimit-Remaining: 9
      X-Ratelimit-Reset: 1
      X-Request-Id: smda55ckcfy89b6tia58shk5fh
      X-Version-Id: developer
      Date: Fri, 11 Sep 2015 13:21:14 GMT
      Content-Length: 657
      Content-Type: application/json; charset=utf-8

      {{user object as json}}
      ```
      
      Include the `Token` as part of the `Authentication` header on your future API requests with the `Bearer` method.
      
      ```
      curl -i -H 'Authorization: Bearer hyr5dmb1mbb49c44qmx4whniso' http://localhost:8065/api/v3/users/me
      ```
      
      You should now be able to access the API as the user you logged in as.
      
      #### OAuth 2.0
      
      Mattermost has the ability to act as an [OAuth 2.0](https://tools.ietf.org/html/rfc6749) service provider.
      
      For an example on how to register an OAuth 2.0 app with your Mattermost instance, please see the [Mattermost-Zapier integration documentation](https://docs.mattermost.com/integrations/zapier.html#register-zapier-as-an-oauth-2-0-application).
      
      Additional documentation on using Mattermost as an OAuth 2.0 service provider will be added here in the future.
  - name: errors
    description: |
      All errors will return an appropriate HTTP response code along with the following JSON body:
      ```
      {
          "id": "the.error.id",
          "message": "Something went wrong", // the reason for the error
          "request_id": "", // the ID of the request
          "status_code": 0, // the HTTP status code
          "is_oauth": false // whether the error is OAuth specific
      }
      ```
  - name: rate limiting
    description: |
      Whenever you make an HTTP request to the Mattermost API you might notice the following headers included in the response:
      ```
      X-Ratelimit-Limit: 10
      X-Ratelimit-Remaining: 9
      X-Ratelimit-Reset: 1441983590
      ```
      
      These headers are telling you your current rate limit status.
      
      | Header | Description |
      | ------ | ----------- |
      | X-Ratelimit-Limit | The maximum number of requests you can make per second. |
      | X-Ratelimit-Remaining | The number of requests remaining in the current window. |
      | X-Ratelimit-Reset | The remaining UTC epoch seconds before the rate limit resets. |
      
      If you exceed your rate limit for a window you will receive the following error in the body of the response:
      
      ```
      HTTP/1.1 429 Too Many Requests
      Date: Tue, 10 Sep 2015 11:20:28 GMT
      X-RateLimit-Limit: 10
      X-RateLimit-Remaining: 0
      X-RateLimit-Reset: 1
      
      limit exceeded
      ```
  - name: WebSocket
    description: |
      In addition to the HTTP RESTful web service, Mattermost also offers a WebSocket event delivery system and some API functionality.

      To connect to the WebSocket follow the standard opening handshake as [defined by the RFC specification](https://tools.ietf.org/html/rfc6455#section-1.3) to the `/api/v3/users/websocket` endpoint of Mattermost.

      #### Authentication

      The Mattermost WebSocket can be authenticated by cookie or through an authentication challenge. If you're authenticating from a browser and have logged in with the Mattermost API, your authentication cookie should already be set, this is how the Mattermost webapp authenticates with the WebSocket.

      To authenticate with an authentication challenge, first connect the WebSocket and then send the following JSON over the connection:

      ```
      {
        "seq": 1,
        "action": "authentication_challenge",
        "data": {
          "token": "mattermosttokengoeshere"
        }
      }
      ```

      If successful, you will receive a standard OK response from the webhook:

      ```
      {
        "status": "OK",
        "seq_reply": 1
      }
      ```

      Once successfully authenticated, the server will pass a `hello` WebSocket event containing server version over the connection.

      #### Events

      WebSocket events are primarily used to alert the client to changes in Mattermost, such as delivering new posts or alerting the client that another user is typing in a channel.

      Events on the WebSocket will have the form:

      ```
      {
        "event": "channel_viewed",
        "data": {
          "channel_id": "ihze299c4j87ped4wannrjdt9c"
        },
        "broadcast":{
          "omit_users": null,
          "user_id": "ay5sq51sebfh58ktrce5ijtcwy",
          "channel_id": "",
          "team_id": ""
        }
      }
      ```

      The `event` field indicates the event type, `data` contains any data relevant to the event and `broadcast` contains information about who the event was sent to. For example, the above example has `user_id` set to "ay5sq51sebfh58ktrce5ijtcwy" meaning that only the user with that ID received this event broadcast. The `omit_users` field can contain an array of user IDs that were specifically omitted from receiving the event.

      The list of Mattermost WebSocket events are:
      - typing
      - posted
      - post_edited
      - post_deleted
      - channel_deleted
      - channel_viewed
      - direct_added
      - new_user
      - leave_team
      - user_added
      - user_updated
      - user_removed
      - preference_changed
      - ephemeral_message
      - status_change
      - hello
      - webrtc

      #### WebSocket API

      Mattermost has some basic support for WebSocket APIs. A connected WebSocket can make requests by sending the following over the connection:

      ```
      {
        "action": "user_typing",
        "seq": 2,
        "data": {
          "channel_id": "nhze199c4j87ped4wannrjdt9c",
          "parent_id": ""
        }
      }
      ```

      This is an example of making a `user_typing` request, with the purpose of alerting the server that the connected client has begun typing in a channel or thread. The `action` field indicates what is being requested, and performs a similar duty as the route in a HTTP API.

      The `seq` or sequence number is set by the client and should be incremented with every use. It is used to distinguish responses to requests that come down the WebSocket. For example, a standard response to the above request would be:

      ```
      {
        "status": "OK",
        "seq_reply": 2
      }
      ```

      Notice `seq_reply` is 2, matching the `seq` of the original request. Using this a client can distinguish which request the response is meant for.

      If there was any information to respond with, it would be encapsulated in a `data` field.

      In the case of an error, the response would be:

      ```
      {
        "status": "FAIL",
        "seq_reply": 2,
        "error": {
          "id": "some.error.id.here",
          "message": "Some error message here"
        }
      }
      ```

      The list of WebSocket API actions is:
      - user_typing
      - get_statuses
      - get_statuses_by_ids

      To see how these actions work, please refer to either the [Golang WebSocket driver](https://github.com/mattermost/platform/blob/master/model/websocket_client.go) or our [JavaScript WebSocket driver](https://github.com/mattermost/mattermost-driver-javascript/blob/master/websocket_client.jsx).

  - name: users
    description: Anything related to the user data model.
  - name: teams
    description: Anything related to the team data model.
  - name: channels
    description: Anything related to the channel data model.
  - name: posts
    description: Anything related to posts, the main messaging model in Mattermost.
  - name: files
    description: Anything related to files uploaded by Mattermost users.
  - name: admin
    description: Anything related to system administration.
  - name: preferences
    description: Anything related to the current user's preferences which are used to store various settings in Mattermost.
  - name: incoming webhooks
    description: Anything related to the incoming webhook system.
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /users/create:
    post:
      tags:
        - users
      summary: Create a new user
      parameters:
        - in: body
          name: body
          description: Abbreviated user object that is to be created
          required: true
          schema:
            type: object
            required:
              - email
              - username
              - password
            properties:
              email:
                type: string
              username:
                type: string
              first_name:
                 type: string
              last_name:
                type: string
              nickname:
                type: string
              password:
                type: string
              locale:
                type: string
              props:
                type: object
      responses:
        '200':
          description: User creation successful
          schema:
            $ref: '#/definitions/User'

  /users/me:
    get:
      tags:
        - users
      summary: Get your user object
      description: Returns the user object for the currently logged in user.
      responses:
        '200':
          description: User object retrieval successful
          schema:
            $ref: '#/definitions/User'

  /users/login:
    post:
      tags:
        - users
      summary: Login to a user account
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - login_id
              - password
            properties:
              login_id:
                type: string
                description: Username, email, or AD/LDAP ID of a user
              password:
                type: string
                description: User's password
              token:
                type: string
                description: Multi-factor authentication token, if required by the user
              device_id:
                type: string
                description: Mobile device ID, for Android or iOS
      responses:
        '200':
          description: User logged in successfuly
          headers:
            token:
              type: string
              description: Access token to be included with future requests
          schema:
            $ref: '#/definitions/User'

  /users/logout:
    post:
      tags:
        - users
      summary: Logout of a user account
      responses:
        '200':
          description: User logged out successfuly
          schema:
            properties:
              user_id:
                type: string

  '/users/{offset}/{limit}':
    get:
      tags:
        - users
      summary: Get users
      description: Get a page of user objects organized into a map using user ID as the key.
      parameters:
        - name: offset
          in: path
          description: The offset to start the page at, use 0 for the first page
          required: true
          type: integer
        - name: limit
          in: path
          description: The limit of users to return per page
          required: true
          type: integer
      responses:
        '200':
          description: Users retrieved successfully
          schema:
            type: object
            additionalProperties:
              $ref: "#/definitions/User"

  '/teams/{team_id}/users/{offset}/{limit}':
    get:
      tags:
        - users
      summary: Get users in a team
      description: Get a page of user objects in a team, organized into a map using user ID as the key.
      parameters:
        - name: team_id
          in: path
          description: The team ID the users are in
          required: true
          type: string
        - name: offset
          in: path
          description: The offset to start the page at, use 0 for the first page
          required: true
          type: integer
        - name: limit
          in: path
          description: The limit of users to return per page
          required: true
          type: integer
      responses:
        '200':
          description: Users retrieved successfully
          schema:
            type: object
            additionalProperties:
              $ref: "#/definitions/User"

  '/users/search':
    post:
      tags:
        - users
      summary: Search users
      description: Get a list of user objects matching some search parameters.
      parameters:
        - in: body
          name: body
          description: Search parameter
          required: true
          schema:
            type: object
            required:
              - term
            properties:
              term:
                type: string
                description: The search term can be the username, nickname, full name or email of the user you're looking for. In some server configurations full name and email search may be blocked by the System Administrator.
              team_id:
                type: string
                description: Provide a team ID if you'd like to restrict search to a single team.
              in_channel_id:
                type: string
                description: Provide an in channel ID if you'd like to only search for users who are in a channel.
              not_in_channel_id:
                type: string
                description: Provide a not in channel ID if you'd like to only search for users who are not in a channel.
              allow_inactive:
                type: boolean
                description: Set this to `true` if you would like to include inactive users in your search.
      responses:
        '200':
          description: Profiles retrieved successfully
          schema:
            type: object
            additionalProperties:
              $ref: "#/definitions/User"

  '/users/name/{username}':
    get:
      tags:
        - users
      summary: Get sanitized user object by username
      description: Gets the sanitized User object with the given username.
      parameters:
        - name: username
          in: path
          description: The username for a specific user
          required: true
          type: string
      responses:
        '200':
          description: User object retrieval successful
          schema:
            $ref: '#/definitions/User'

  '/users/email/{email}':
    get:
      tags:
        - users
      summary: Get sanitized user object by email
      description: Gets the sanitized User object with the given email.
      parameters:
        - name: email
          in: path
          description: The email for a specific user
          required: true
          type: string
      responses:
        '200':
          description: User object retrieval successful
          schema:
            $ref: '#/definitions/User'

  '/users/ids':
    post:
      tags:
        - users
      summary: Get users by IDs
      description: Get a map of sanitized user objects by a list of user IDs.
      parameters:
        - in: body
          name: body
          description: A list of user IDs to fetch
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Profiles retrieved successfully
          schema:
            type: object
            additionalProperties:
              $ref: "#/definitions/User"

  '/teams/{team_id}/channels/{channel_id}/users/{offset}/{limit}':
    get:
      tags:
        - users
      summary: Get users in a channel
      description: Get a map of sanitized user objects that are in the specified channel.
      parameters:
        - name: team_id
          in: path
          description: The team ID
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID
          required: true
          type: string
        - name: offset
          in: path
          description: The offset to start the page at, use 0 for the first page
          required: true
          type: integer
        - name: limit
          in: path
          description: The limit of users to return per page
          required: true
          type: integer
      responses:
        '200':
          description: Profiles retrieved successfully
          schema:
            type: object
            additionalProperties:
              $ref: "#/definitions/User"

  '/teams/{team_id}/channels/{channel_id}/users/not_in_channel/{offset}/{limit}':
    post:
      tags:
        - users
      summary: Get users not in a channel
      description: Get a map of sanitized user objects that are on the team but not in the channel.
      parameters:
        - name: team_id
          in: path
          description: The team ID
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID the users are not part of
          required: true
          type: string
        - name: offset
          in: path
          description: The offset to start the page at, use 0 for the first page
          required: true
          type: integer
        - name: limit
          in: path
          description: The limit of users to return per page
          required: true
          type: integer
      responses:
        '200':
          description: Profiles retrieved successfully
          schema:
            type: object
            additionalProperties:
              $ref: "#/definitions/User"

  /users/update:
    post:
      tags:
        - users
      summary: Update a user object
      parameters:
        - in: body
          name: body
          description: User object to update with
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: User creation successful
          schema:
            $ref: '#/definitions/User'

  /users/update_roles:
    post:
      tags:
        - users
      summary: Update a user's roles
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - user_id
              - roles
            properties:
              user_id:
                type: string
                description: ID of the user to update the roles of
              team_id:
                type: string
                description: ID of the team the user is on
              roles:
                type: string
                description: Space-delimited list of roles to give the user
      responses:
        '200':
          description: User roles updated successful
          schema:
            type: object
            properties:
              user_id:
                type: string
          examples:
            application/json:
              user_id: "string"

  /users/update_active:
    post:
      tags:
        - users
      summary: Update whether a user's account is active
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - user_id
              - active
            properties:
              user_id:
                type: string
                description: ID of the user to set active/inactive
              active:
                type: boolean
                description: Use `true` to set the user active, `false` for inactive
      responses:
        '200':
          description: User active status successfully updated
          schema:
            $ref: '#/definitions/User'

  /users/update_notify:
    post:
      tags:
        - users
      summary: Update a user's notification properties
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
      responses:
        '200':
          description: User notification properties successfully updated
          schema:
            $ref: '#/definitions/User'

  /users/newpassword:
    post:
      tags:
        - users
      summary: Update a user's password
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - user_id
              - current_password
              - new_password
            properties:
              user_id:
                type: string
                description: The ID of the user to change the password for
              current_password:
                type: string
                description: The user's current password
              new_password:
                 type: string
                 description: The user's new password
      responses:
        '200':
          description: User password updated successfully
          schema:
            type: object
            properties:
              user_id:
                type: string
          examples:
            application/json:
              user_id: "string"

  /users/send_password_reset:
    post:
      tags:
        - users
      summary: Send a password reset email
      description: Send an email to the user with a link to reset their password. User must use the email/password sign-in method.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                description: The email of the user to send the reset link to
      responses:
        '200':
          description: Password reset email sent successfully
          schema:
            type: object
            properties:
              email:
                type: string
          examples:
            application/json:
              email: someone@example.com

  /users/reset_password:
    post:
      tags:
        - users
      summary: Reset user password
      description: Resets the user's password.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - code
              - new_password
            properties:
              code:
                type: string
                description: The code provided from the send password reset email.
              new_password:
                type: string
                description: User's new password.
      responses:
        '200':
          description: Password reset successfully.
          schema:
            $ref: '#/definitions/StatusOK'
        '500':
          description: Password reset errors.
          examples:
            api.user.reset_password.invalid_link.app_error:
              description: The reset password link does not appear to be valid
            api.user.reset_password.link_expired.app_error:
              description: The password reset link has expired

  '/users/autocomplete':
    get:
      tags:
        - users
      summary: Autocomplete users
      description: Get a list of users on the system by matching the provided search term against username, full name and nickname.
      parameters:
        - name: term
          in: query
          description: The term to match against username, full name or nickname
          required: true
          type: string
      responses:
        '200':
          description: Autocomplete users retrieved successfully
          schema:
            type: array
            items:
              $ref: "#/definitions/User"

  '/teams/{team_id}/users/autocomplete':
    get:
      tags:
        - users
      summary: Autocomplete users in a team
      description: Get a list of users on the specified team by matching the term against username, full name and nickname.
      parameters:
        - name: team_id
          in: path
          description: The team ID the users are in
          required: true
          type: string
        - name: term
          in: query
          description: The term to match against username, full name or nickname
          required: true
          type: string
      responses:
        '200':
          description: Autocomplete users retrieved successfully
          schema:
            type: object
            additionalProperties:
              $ref: "#/definitions/UserAutocompleteInTeam"

  '/teams/{team_id}/channels/{channel_id}/users/autocomplete':
    get:
      tags:
        - users
      summary: Autocomplete users in a channel
      description: Get a list of users in the specified channel by matching the term against username, full name and nickname. Also returns a list of users matching the term that are on the team but not in the channel.
      parameters:
        - name: team_id
          in: path
          description: The team ID the users are in
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID the users are in
          required: true
          type: string
        - name: term
          in: query
          description: The term to match against username, full name or nickname
          required: true
          type: string
      responses:
        '200':
          description: Autocomplete users retrieved successfully
          schema:
            type: object
            additionalProperties:
              $ref: "#/definitions/UserAutocompleteInChannel"

  /teams/create:
    post:
      tags:
        - teams
      summary: Create a new team
      parameters:
        - in: body
          name: body
          description: Abbreviated team object that is to be created
          required: true
          schema:
            type: object
            required:
              - name
              - display_name
              - type
            properties:
              name:
                type: string
                description: Unique handler for a team, will be present in the team URL
              display_name:
                type: string
                description: Non-unique UI name for the team
              type:
                type: string
                description: "`'O'` for open, `'I'` for invite only"
      responses:
        '200':
          description: Team creation successful
          schema:
            $ref: '#/definitions/Team'

  /teams/all:
    get:
      tags:
        - teams
      summary: Get all teams
      description: Gets all teams which the current user can has access to. If the user is a System Admin, this will be all teams on the server. Otherwise, it will only be the teams of which the user is a member.
      responses:
        '200':
          description: Teams found
          schema:
            $ref: '#/definitions/TeamMap'

  /teams/members:
    get:
      tags:
        - teams
      summary: Get all the teams the user is a member of
      description: Get all the teams the user is member a of
      responses:
        '200':
          description: Teams found
          schema:
            type: array
            items:
              $ref: '#/definitions/TeamMember'

  /teams/unread:
      get:
        tags:
          - teams
        summary: Get the count for unread messages and mentions in the teams the user is a member of
        description: Get the count for unread messages and mentions in the teams the user is a member of
        parameters:
          - name: id
            in: query
            description: Optional team id to be excluded from the results
            required: true
            type: string
        responses:
          '200':
            description: Teams found
            schema:
              type: array
              items:
                $ref: '#/definitions/TeamUnread'

  '/teams/{team_id}/members/{offset}/{limit}':
    get:
      tags:
        - teams
      summary: Get team members
      description: Get a page of team member objects on the specified team.
      parameters:
        - name: team_id
          in: path
          description: Team ID of the members to return
          required: true
          type: string
        - name: offset
          in: path
          description: The offset to start the page at, use 0 for the first page
          required: true
          type: integer
        - name: limit
          in: path
          description: The limit of members to return per page
          required: true
          type: integer
      responses:
        '200':
          description: Members retrieved successfully
          schema:
            type: array
            items:
              $ref: "#/definitions/TeamMember"

  '/teams/{team_id}/members/{user_id}':
    get:
      tags:
        - teams
      summary: Get a single team member
      description: Get a single team member object for the specified team and user.
      parameters:
        - name: team_id
          in: path
          description: Team ID of the member to return
          required: true
          type: string
        - name: user_id
          in: path
          description: User ID of the member to return
          required: true
          type: string
      responses:
        '200':
          description: Member retrieved successfully
          schema:
            $ref: "#/definitions/TeamMember"

  '/teams/{team_id}/members/ids':
    post:
      tags:
        - teams
      summary: Get team members by IDs
      description: Get an array of team member objects for the specified team and user IDs.
      parameters:
        - name: team_id
          in: path
          description: Team ID of the member to return
          required: true
          type: string
        - in: body
          name: body
          description: A list of user IDs
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Members retrieved successfully
          schema:
            type: array
            items:
              $ref: "#/definitions/TeamMember"
            additionalProperties:
              $ref: "#/definitions/TeamMember"

  '/teams/{team_id}/me':
    get:
      tags:
        - teams
      summary: Get a team object
      parameters:
        - name: team_id
          in: path
          description: Team ID of the team you want to retrieve
          required: true
          type: string
      responses:
        '200':
          description: Team object
          schema:
            $ref: "#/definitions/Team"

  '/teams/name/{team_name}':
    get:
      tags:
        - teams
      summary: Get a team object
      parameters:
        - name: team_name
          in: path
          description: Team name of the team you want to retrieve
          required: true
          type: string
      responses:
        '200':
          description: Team object
          schema:
            $ref: "#/definitions/Team"

  '/teams/{team_id}/update':
    post:
      tags:
        - teams
      summary: Update a team object
      parameters:
        - name: team_id
          in: path
          description: Team ID of the team you want to update
          required: true
          type: string
        - in: body
          name: body
          description: Team object to update with
          required: true
          schema:
            $ref: '#/definitions/Team'
      responses:
        '200':
          description: The updated team object
          schema:
            $ref: "#/definitions/Team"

  '/teams/{team_id}/stats':
    get:
      tags:
        - teams
      summary: Get the stats for a team
      description: Get some statistics about the specified team.
      parameters:
        - name: team_id
          in: path
          description: Team ID of the team you want stats for
          required: true
          type: string
      responses:
        '200':
          description: The team stats object
          schema:
            $ref: "#/definitions/TeamStats"

  '/teams/{team_id}/add_user_to_team':
    post:
      tags:
        - teams
      summary: Add a user to a team
      parameters:
        - name: team_id
          in: path
          description: Team ID of the team you want to add the user too
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - user_id
            properties:
              user_id:
                type: string
                description: The user_id of the user to add to the team.
      responses:
        '200':
          description: User added sucessfully

  '/teams/{team_id}/remove_user_from_team':
    post:
      tags:
        - teams
      summary: Remove a user from a team
      parameters:
        - name: team_id
          in: path
          description: Team ID of the team you want to remove the user from
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - user_id
            properties:
              user_id:
                type: string
                description: The user ID of the user to remove from the team.
      responses:
        '200':
          description: User removed sucessfully

  '/teams/{team_id}/commands/list_team_commands':
    get:
      tags:
        - teams
      summary: Get all slash commands for this team
      parameters:
        - name: team_id
          in: path
          description: Team ID of the team you want commands for
          required: true
          type: string
      responses:
        '200':
          description: An array with the commands
          schema:
            $ref: "#/definitions/Command"

  '/teams/{team_id}/channels/create':
    post:
      tags:
        - channels
      summary: Create a channel
      description: Create a new channel for the specified team.
      parameters:
        - in: path
          name: team_id
          description: Team ID to add the channel to
          required: true
          type: string
        - in: body
          name: body
          description: Abbreviated channel object
          required: true
          schema:
            type: object
            required:
              - name
              - display_name
              - type
            properties:
              team_id:
                type: string
                description: The team ID of the channel to create
              name:
                type: string
                description: The unique handle for the channel, will be present in the channel URL
              display_name:
                type: string
                description: The non-unique UI name for the channel
              purpose:
                type: string
                description: A short description of the purpose of the channel
              header:
                type: string
                description: Markdown-formatted text to display in the header of the channel
              type:
                type: string
                description: "'O' for an open channel, 'P' for a private channel"
      responses:
        '200':
          description: Channel created successfully
          schema:
            $ref: '#/definitions/Channel'
        '403':
          description: User does not belong to the team

  '/teams/{team_id}/channels/update':
    post:
      tags:
        - channels
      summary: Update a channel
      description: Update a channel for the specified team.
      parameters:
        - in: path
          name: team_id
          description: Team ID of the channel to update
          required: true
          type: string
        - in: body
          name: body
          description: The channel object with updated fields
          required: true
          schema:
            $ref: '#/definitions/Channel'
      responses:
        '200':
          description: Channel updated successfully
          schema:
            $ref: '#/definitions/Channel'
        '403':
          description: User does not belong to the team

  '/teams/{team_id}/channels/view':
    post:
      tags:
        - channels
      summary: View a channel
      description: Perform all the actions involved in viewing a channel. This includes marking channels as read, clearing push notifications, and updating the active channel.
      parameters:
        - in: path
          name: team_id
          description: Team ID of the channel to update
          required: true
          type: string
        - in: body
          name: body
          description: Paremeters affecting how and which channels to view.
          required: true
          schema:
            type: object
            required:
              - channel_id
            properties:
              channel_id:
                type: string
                description: The channel ID that is being viewed. Use a blank string to indicate that all channels have lost focus.
              prev_channel_id:
                type: string
                description: The channel ID of the previous channel, used when switching channels. Providing this ID will cause push notifications to clear on the channel being switched to.

      responses:
        '200':
          description: Channel viewed successfully.
          schema:
            $ref: '#/definitions/StatusOK'

  '/teams/{team_id}/channels/':
      get:
        tags:
          - channels
        summary: Get channels for the user
        description: Get a list of channels for a team that the logged in user is a part of.
        parameters:
          - name: team_id
            in: path
            description: Team ID of the channels to return
            required: true
            type: string
        responses:
          '200':
            description: The list of channels
            schema:
              type: array
              items:
                $ref: '#/definitions/Channel'
          '403':
            description: User does not belong to the team
          '500':
            description: Could not retrieve the user channels

  '/teams/{team_id}/channels/name/{channel_name}':
      get:
        tags:
          - channels
        summary: Get channel by name
        description: Get a single channel by team ID and channel name.
        parameters:
          - name: team_id
            in: path
            description: Team ID of the channels to return
            required: true
            type: string
          - name: channel_name
            in: path
            description: The channel name
            required: true
            type: string
        responses:
          '200':
            description: The channel
            schema:
              $ref: '#/definitions/Channel'
          '500':
            description: Channel does not exist.

  '/teams/{team_id}/channels/more':
    get:
      tags:
        - channels
      deprecated: true
      summary: Get channels the user has not joined
      description: Scheduled for deprecation in Mattermost 3.7, please use `/teams/{team_id}/channels/more/{offset}/{limit}` instead. Get a list of open channels the user does not belong to by team ID.
      parameters:
        - name: team_id
          in: path
          description: Team ID of the channels to return
          required: true
          type: string
      responses:
        '200':
          description: The list of channels
          schema:
            type: array
            items:
              $ref: '#/definitions/Channel'
        '403':
          description: User does not belong to the team
        '500':
          description: Could not retrieve the user channels

  '/teams/{team_id}/channels/more/{offset}/{limit}':
    get:
      tags:
        - channels
      summary: Get a page of channels the user has not joined
      description: Get a page of open channels the user does not belong to by team ID.
      parameters:
        - name: team_id
          in: path
          description: Team ID of the channels to return
          required: true
          type: string
        - name: offset
          in: path
          description: The offset to start the page at, use 0 for the first page
          required: true
          type: integer
        - name: limit
          in: path
          description: The limit of channels to return per page
          required: true
          type: integer
      responses:
        '200':
          description: The list of channels
          schema:
            type: array
            items:
              $ref: '#/definitions/Channel'
        '403':
          description: User does not belong to the team
        '500':
          description: Could not retrieve the user channels

  '/teams/{team_id}/channels/members':
    get:
      tags:
        - channels
      summary: Get channel members for the user
      description: Get a list of channel members for the specified team for the logged in user.
      parameters:
        - name: team_id
          in: path
          description: Team ID to get the channel members for
          required: true
          type: string
      responses:
        '200':
          description: The list of channel members
          schema:
            type: array
            items:
              $ref: '#/definitions/ChannelMember'
        '403':
          description: User does not belong to the team
        '500':
          description: Could not retrieve the channel members

  '/teams/{team_id}/channels/{channel_id}':
    get:
      tags:
        - channels
      summary: Get a channel
      description: Get a single channel by team ID and channel ID.
      parameters:
        - name: team_id
          in: path
          description: Team ID the channel belongs to
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID
          required: true
          type: string
      responses:
        '200':
          description: The channel
          schema:
            $ref: '#/definitions/ChannelData'
        '500':
          description: Could not retrieve the channel, the user is not a member of the channel or the channel does not belong to the team

  '/teams/{team_id}/channels/{channel_id}/stats':
    get:
      tags:
        - channels
      summary: Get a channel's stats
      description: Get the total count for users in the channel.
      parameters:
        - name: team_id
          in: path
          description: Team ID the channel belongs to
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID
          required: true
          type: string
      responses:
        '200':
          description: The channel stats
          schema:
            $ref: '#/definitions/ChannelStats'
        '500':
          description: Could not retrieve the channel stats, the user is not a member of the channel or the channel does not belong to the team

  '/teams/{team_id}/channels/{channel_id}/delete':
    post:
      tags:
        - channels
      summary: Delete a channel
      description: Delete a channel from a team.
      parameters:
        - name: team_id
          in: path
          description: Team ID the channel belongs to
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID
          required: true
          type: string
      responses:
        '200':
          description: The channel ID
          schema:
            type: object
            properties:
              id:
                type: string

  '/teams/{team_id}/channels/{channel_id}/add':
    post:
      tags:
        - channels
      summary: Add a user
      description: Add a user to the channel.
      parameters:
        - name: team_id
          in: path
          description: Team ID the channel belongs to
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - user_id
            properties:
              user_id:
                type: string
                description: The user_id of the user to add to the channel.
      responses:
        '200':
          description: User added successfully

  '/teams/{team_id}/channels/{channel_id}/members/{user_id}':
    get:
      tags:
        - channels
      summary: Get a channel member
      description: Get the channel member object for a specific user.
      parameters:
        - name: team_id
          in: path
          description: Team ID the channel belongs to
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID
          required: true
          type: string
        - name: user_id
          in: path
          description: The user ID
          required: true
          type: string
      responses:
        '200':
          description: The channel member
          schema:
            $ref: '#/definitions/ChannelMember'
        '500':
          description: Could not retrieve the channel member, the user is not a member of the channel or the channel does not belong to the team

  '/teams/{team_id}/channels/{channel_id}/members/ids':
      post:
        tags:
          - channels
        summary: Get channel members by IDs
        description: Get an array of channel member objects for the specified channel and user IDs.
        parameters:
          - name: team_id
            in: path
            description: Team ID for the corresponding channel
            required: true
            type: string
          - name: channel_id
            in: path
            description: The channel ID
            required: true
            type: string
          - in: body
            name: body
            description: A list of user IDs
            required: true
            schema:
              type: array
              items:
                type: string
        responses:
          '200':
            description: Members retrieved successfully
            schema:
              type: array
              items:
                $ref: "#/definitions/ChannelMember"
              additionalProperties:
                $ref: "#/definitions/ChannelMember"

  '/teams/{team_id}/channels/{channel_id}/update_member_roles':
      post:
        tags:
          - channels
        summary: Update the roles of a channel member
        description: Update the roles of the provided user in the specified channel.
        parameters:
          - name: team_id
            in: path
            description: Team ID for the corresponding channel
            required: true
            type: string
          - name: channel_id
            in: path
            description: The channel ID for which the member roles are being updated
            required: true
            type: string
          - in: body
            name: body
            required: true
            schema:
              type: object
              required:
                - user_id
                - new_roles
              properties:
                user_id:
                  type: string
                  description: User ID to apply the new roles to.
                new_roles:
                  type: string
                  description: Roles to set on the user in the provided channel.
        responses:
          '200':
            description: Channel memeber roles updated successfully.
            schema:
              $ref: '#/definitions/StatusOK'

  '/teams/{team_id}/channels/autocomplete':
    get:
      tags:
        - channels
      summary: Autocomplete channels in a team
      description: Get a list of channels on the specified team by matching the term against name and display name.
      parameters:
        - name: team_id
          in: path
          description: The team ID the channels are in
          required: true
          type: string
        - name: term
          in: query
          description: The term to match against
          required: true
          type: string
      responses:
        '200':
          description: Autocomplete channels retrieved successfully
          schema:
            type: array
            items:
              $ref: "#/definitions/Channel"

  '/teams/{team_id}/channels/more/search':
    post:
      tags:
        - channels
      summary: Search for more channels
      description: Get a list of public channel objects the current user is not in, matching some search parameters.
      parameters:
        - name: team_id
          in: path
          description: The team ID the channels are in
          required: true
          type: string
        - in: body
          name: body
          description: Search parameter
          required: true
          schema:
            type: object
            required:
              - term
            properties:
              term:
                type: string
      responses:
        '200':
          description: Channels retrieved successfully
          schema:
            type: array
            items:
              $ref: "#/definitions/Channel"
  '/teams/{team_id}/posts/search':
    post:
      tags:
        - posts
      summary: Search for posts
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - in: body
          name: body
          description: Terms to search for
          required: true
          schema:
            type: object
            required:
              - terms
              - is_or_search
            properties:
              terms:
                type: string
                description: The search terms as inputed by the user.
              is_or_search:
                type: boolean
                description: Set to true if an Or search should be performed vs an And search.
      responses:
        '200':
          description: Search successful with 0-100 results.
          schema:
            $ref: '#/definitions/PostList'

  '/teams/{team_id}/flagged/{offset}/{limit}':
    get:
      tags:
        - posts
      summary: Get all flagged posts for a user
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: offset
          in: path
          description: The offset to start the page at, use 0 for the first page.
          required: true
          type: integer
        - name: limit
          in: path
          description: The limit of items to return per page.
          required: true
          type: integer
      responses:
        '200':
          description: Posts retrieved successfully
          schema:
            $ref: "#/definitions/PostList"

  '/teams/{team_id}/channels/{channel_id}/posts/create':
    post:
      tags:
        - posts
      summary: Create a post
      description: Create a post in a channel.
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - in: body
          name: body
          description: The post to create
          required: true
          schema:
            $ref: "#/definitions/Post"
      responses:
        '200':
          description: The newly created Post is returned.
          schema:
            $ref: "#/definitions/Post"

  '/teams/{team_id}/channels/{channel_id}/posts/update':
    post:
      tags:
        - posts
      summary: Update a post
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - in: body
          name: body
          description: The post to create
          required: true
          schema:
            $ref: "#/definitions/Post"
      responses:
        '200':
          description: The updated Post is returned.
          schema:
            $ref: "#/definitions/Post"

  '/teams/{team_id}/channels/{channel_id}/posts/page/{offset}/{limit}':
    get:
      tags:
        - posts
      summary: Get posts for a channel
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - name: offset
          in: path
          description: The page offset, where 0 is the first page.
          required: true
          type: string
        - name: limit
          in: path
          description: The limit of items to return per page.
          required: true
          type: string
      responses:
        '200':
          description: Post retrieved successfully
          schema:
            $ref: "#/definitions/PostList"

  '/teams/{team_id}/channels/{channel_id}/posts/since/{time}':
    get:
      tags:
        - posts
      summary: Get posts since a time
      description: Get posts for a channel starting from the time supplied.
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - name: time
          in: path
          description: The last time to query from.
          required: true
          type: string
      responses:
        '200':
          description: Post retrieved successfully
          schema:
            $ref: "#/definitions/PostList"

  '/teams/{team_id}/channels/{channel_id}/posts/{post_id}/get':
    get:
      tags:
        - posts
      summary: Get a post
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - name: post_id
          in: path
          description: The post ID.
          required: true
          type: string
      responses:
        '200':
          description: Post retrieved successfully
          schema:
            $ref: "#/definitions/PostList"

  '/teams/{team_id}/channels/{channel_id}/posts/{post_id}/delete':
    post:
      tags:
        - posts
      summary: Deletes a post
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - name: post_id
          in: path
          description: The post ID.
          required: true
          type: string
      responses:
        '200':
          description: The post id that was successfully deleted.
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
                description: The post ID.

  '/teams/{team_id}/channels/{channel_id}/posts/{post_id}/before/{offset}/{limit}':
    get:
      tags:
        - posts
      summary: Get posts before a post
      description: Get posts before a certian post for a channel.
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - name: post_id
          in: path
          description: The post ID.
          required: true
          type: string
        - name: offset
          in: path
          description: The page offset, where 0 is the first page.
          required: true
          type: string
        - name: limit
          in: path
          description: The limit of items to return per page.
          required: true
          type: string
      responses:
        '200':
          description: Posts retrieved successfully
          schema:
            $ref: "#/definitions/PostList"

  '/teams/{team_id}/channels/{channel_id}/posts/{post_id}/after/{offset}/{limit}':
    get:
      tags:
        - posts
      summary: Get posts after a post
      description: Get posts after a certian post for a channel.
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - name: post_id
          in: path
          description: The post ID.
          required: true
          type: string
        - name: offset
          in: path
          description: The page offset, where 0 is the first page.
          required: true
          type: string
        - name: limit
          in: path
          description: The limit of items to return per page.
          required: true
          type: string
      responses:
        '200':
          description: Posts retrieved successfully
          schema:
            $ref: "#/definitions/PostList"

  '/get_opengraph_metadata':
    post:
      tags:
        - posts
        - opengraph
      summary: Get OpenGraph metadata for a URL (website link)
      parameters:
        - in: body
          name: body
          description: URL to retreive OG metadata of
          required: true
          schema:
            type: object
            required:
              - url
            properties:
              url:
                type: string
                description: URL to retreive OG metadata of.
      responses:
        '200':
          description: OpenGraph metadata was successfully retireved.
          schema:
            $ref: '#/definitions/OpenGraph'
  '/teams/{team_id}/files/upload':
    post:
      tags:
        - files
      summary: Upload a file
      description: Uploads a file that can later be attached to a post.
      parameters:
        - name: team_id
          in: path
          description: The ID of one of the current user's teams
          required: true
          type: string
        - name: files
          in: formData
          description: A file to be uploaded
          required: true
          type: file
        - name: channel_id
          in: formData
          description: The ID of the channel that this file will be uploaded to
          required: true
          type: string
        - name: client_ids
          in: formData
          description: A unique identifier for the file that will be returned in the response
          required: false
          allowEmptyValue: true
          type: string
      responses:
        '200':
          description: Corresponding lists of the provided client_ids and the metadata that has been stored in the database for each one
          schema:
            type: object
            properties:
              file_infos:
                description: A list of file metadata that has been stored in the database
                type: array
                items:
                  $ref: '#/definitions/FileInfo'
              client_ids:
                description: A list of the client_ids that were provided in the request
                type: array
                items:
                  type: string
        '400':
          description: Type of the uploaded file doesn't match its file extension or uploaded file is an image that exceeds the maximum dimensions
        '401':
          description: User is not logged in
        '403':
          description: User does not have permission to upload file to the provided team/channel
        '413':
          description: Uploaded file is too large
        '501':
          description: File storage is disabled

  '/files/{file_id}/get':
    get:
      tags:
        - files
      summary: Get a file
      description: Gets a file that has been uploaded to Mattermost.
      parameters:
        - name: file_id
          in: path
          description: The ID of the file to get
          required: true
          type: string
      responses:
        '200':
          description: The requested file
        '400':
          description: The file is owned by another user and is not attached to a post
        '403':
          description: User does not have permission to view the file
        '404':
          description: The file cannot be found on the file system
        '501':
          description: File storage is disabled

  '/files/{file_id}/get_thumbnail':
    get:
      tags:
        - files
      summary: Get an image thumbnail
      description: Gets a thumbnail image for an image file that has been uploaded to Mattermost.
      parameters:
        - name: file_id
          in: path
          description: The ID of the file thumbnail to get
          required: true
          type: string
      responses:
        '200':
          description: The requested file thumbnail
        '400':
          description: The file is not an image or does not have a thumbnail image or the file is owned by another user and is not attached to a post
        '403':
          description: User does not have permission to view the file
        '404':
          description: The file thumbnail cannot be found on the file system
        '501':
          description: File storage is disabled

  '/files/{file_id}/get_preview':
    get:
      tags:
        - files
      summary: Get an image preview
      description: Gets a preview image for an image file that has been uploaded to Mattermost.
      parameters:
        - name: file_id
          in: path
          description: The ID of the file preview to get
          required: true
          type: string
      responses:
        '200':
          description: The requested file preview
        '400':
          description: The file is not an image or does not have a preview image or the file is owned by another user and is not attached to a post
        '403':
          description: User does not have permission to view the file
        '404':
          description: The file preview cannot be found on the file system
        '501':
          description: File storage is disabled

  '/files/{file_id}/get_info':
    get:
      tags:
        - files
      summary: Get metadata for a file
      description: Gets the stored metadata for a file that has been uploaded to Mattermost.
      parameters:
        - name: file_id
          in: path
          description: The ID of the file info to get
          required: true
          type: string
      responses:
        '200':
          description: The stored metadata for the given file
          schema:
            $ref: "#/definitions/FileInfo"
        '400':
          description: The file is owned by another user and is not attached to a post
        '403':
          description: User does not have permission to view the file
        '501':
          description: File storage is disabled

  '/files/{file_id}/get_public_link':
    get:
      tags:
        - files
      summary: Get a public file link
      description: Gets a public link for a file that can be accessed without logging into Mattermost.
      parameters:
        - name: file_id
          in: path
          description: The ID of the file to get a link for
          required: true
          type: string
      responses:
        '200':
          description: A publicly accessible link to the given file
          schema:
            type: string
        '400':
          description: The file is not attached to a post
        '403':
          description: User does not have permission to view the file
        '501':
          description: Public links are disabled or file storage is disabled

  '/admin/logs':
    get:
      tags:
        - admin
      summary: Get server logs
      description: Gets the server logs
      responses:
        '200':
          description: The list of log entries
          schema:
            type: array
            items:
              type: string
        '403':
          description: User is not a system admin

  '/admin/audits':
    get:
      tags:
        - admin
      summary: Get audits
      description: Gets the server audit logs
      responses:
        '200':
          description: The list of audit entries
          schema:
            type: array
            items:
              $ref: '#/definitions/Audit'
        '403':
          description: User is not a system admin

  '/admin/config':
    get:
      tags:
        - admin
      summary: Get config
      description: Gets the server config
      responses:
        '200':
          description: The server config
          schema:
            $ref: "#/definitions/Config"
        '403':
           description: User is not a system admin

  '/admin/save_config':
     post:
       tags:
         - admin
       summary: Save config
       description: Saves the server config
       parameters:
         - in: body
           name: body
           description: The server config to be saved
           required: true
           schema:
              $ref: '#/definitions/Config'
       responses:
         '200':
           description: The config was saved successfully
           schema:
             $ref: '#/definitions/StatusOK'
         '403':
           description: User is not a system admin

  '/admin/reload_config':
    get:
      tags:
        - admin
      summary: Reload config
      description: Reloads the server config
      responses:
        '200':
          description: The config was reloaded successfully
          schema:
            $ref: '#/definitions/StatusOK'
        '403':
           description: User is not a system admin

  '/admin/invalidate_all_caches':
    get:
      tags:
        - admin
      summary: Invalidates all caches
      description: Invalidates all user caches
      responses:
        '200':
          description: All caches were invalidated successfully
          schema:
            $ref: '#/definitions/StatusOK'
        '403':
          description: User is not a system admin

  '/admin/test_email':
    post:
      tags:
        - admin
      summary: Send a test email
      description: Sends a test email using the provided config
      parameters:
        - in: body
          name: body
          description: The config to be used to send a test email
          required: true
          schema:
            $ref: '#/definitions/Config'
      responses:
        '200':
          description: Successfully sent a test email
          schema:
            type: string
            description: Returns SUCCESS = true when the test email was successfully sent
        '403':
          description: User is not a system admin

  '/admin/recycle_db_conn':
    get:
      tags:
        - admin
      summary: Recycle database connection
      description: Recycles database connection
      responses:
        '200':
          description: Database connection was recycled successfully
          schema:
            $ref: '#/definitions/StatusOK'
        '403':
          description: User is not a system admin

  '/admin/analytics/{name}':
    get:
      tags:
        - admin
      summary: Get analytics
      description: Gets server analytics
      parameters:
        - in: path
          name: name
          description: The type of analytics to receive
          required: true
          type: string
      responses:
        '200':
          description: An array of analytics
          schema:
            type: array
            items:
              type: object
              properties:
                Name:
                  type: string
                value:
                  type: integer
        '403':
          description: User is not a system admin

  '/admin/analytics/{team_id}/{name}':
    get:
      tags:
        - admin
      summary: Get analytics by team
      description: Gets analytics about a specified team
      parameters:
        - in: path
          name: team_id
          description: The team id to get analytics for
          required: true
          type: string
        - in: path
          name: name
          description: The type of analytics to receive
          required: true
          type: string
      responses:
        '200':
          description: An array of analytics about the specified team
          schema:
            type: array
            items:
              type: object
              properties:
                Name:
                  type: string
                value:
                  type: integer
        '403':
          description: User is not a system admin

  '/admin/reset_mfa':
    post:
      tags:
        - admin
      summary: Reset MFA status
      description: Resets user's MFA status
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - user_id
            properties:
              user_id:
                type: string
                description: The user ID to reset MFA status for
      responses:
        '200':
          description: User's MFA status was reset successfully
          schema:
            $ref: '#/definitions/StatusOK'
        '403':
          description: User is not a system admin

  '/admin/reset_password':
    post:
      tags:
        - admin
      summary: Reset password
      description: Resets a user's password
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - user_id
              - new_password
            properties:
              user_id:
                type: string
                description: The user ID to reset password for
              new_password:
                type: string
                description: The user's new password
      responses:
        '200':
          description: User's password was reset successfully
          schema:
            $ref: '#/definitions/StatusOK'
        '403':
          description: User is not a system admin

  '/admin/recently_active_users/{team_id}':
    get:
      tags:
        - admin
      summary: Get recently active users
      description: Gets the recently active users, organized into a map using user ID as the key
      parameters:
        - in: path
          name: team_id
          description: The team ID to get the recently active users for
          required: true
          type: string
      responses:
        '200':
          description: Users retrieved successfully
          schema:
            type: object
            additionalProperties:
              $ref: "#/definitions/User"

  /preferences/save:
    post:
      tags:
        - preferences
      summary: Save user preferences
      description: Add or update a list of preferences for the current user.
      parameters:
        - name: body
          in: body
          description: A list of preferences to add or update for the current user
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/Preference"
      responses:
        '200':
          description: All of the provided preferences have been successfully saved
        '400':
          description: The request body is invalid
        '401':
          description: User is not logged in
        '403':
          description: One or more of the provided preferences has a user_id that doesn't match the current user

  /preferences/delete:
    post:
      tags:
        - preferences
      summary: Delete user preferences
      description: Delete a list of preferences from the current user.
      parameters:
        - name: body
          in: body
          description: A list of preferences to remove from for the current user
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/Preference"
      responses:
        '200':
          description: All of the provided preferences have been successfully deleted
        '400':
          description: The request body is invalid
        '401':
          description: User is not logged in
        '403':
          description: One or more of the provided preferences has a user_id that doesn't match the current user

  '/preferences/{category}':
    get:
      tags:
        - preferences
      summary: List a user's preferences
      description: Lists the current user's stored preferences in the given category.
      parameters:
        - name: category
          in: path
          description: The category of a group of preferences
          required: true
          type: string
      responses:
        '200':
          description: A list of all of the current user's preferences in the given category
          schema:
            type: array
            items:
              $ref: "#/definitions/Preference"
        '401':
          description: User is not logged in

  '/preferences/{category}/{name}':
    get:
      tags:
        - preferences
      summary: Get a specific user preference
      description: Returns a single preference for the current user with the given category and name.
      parameters:
        - name: category
          in: path
          description: The category of a group of preferences
          required: true
          type: string
        - name: name
          in: path
          description: The name of a preferences
          required: true
          type: string
      responses:
        '200':
          description: A single preference for the current user in the current categorylist of all of the current user's preferences in the given category
          schema:
            type: array
            items:
              $ref: "#/definitions/Preference"
        '401':
          description: User is not logged in
        '500':
          description: No such preference exists for the current user

  '/teams/{team_id}/hooks/incoming/list':
    get:
      tags:
        - incoming-webhooks
      summary: List incoming webhooks for a team
      parameters:
        - name: team_id
          in: path
          description: Team ID of incoming webhooks to return
          required: true
          type: string
      responses:
        '200':
          description: The list of incoming webhooks
          schema:
            type: array
            items:
              $ref: "#/definitions/IncomingWebhook"

  '/teams/{team_id}/hooks/incoming/create':
    post:
      tags:
        - incoming-webhooks
      summary: Create an incoming webhook to a team
      parameters:
        - name: team_id
          in: path
          description: Team ID the incoming webhook will belong to
          required: true
          type: string
        - in: body
          name: body
          description: Abbreviated incoming webhook object
          required: true
          schema:
            type: object
            required:
              - channel_id
            properties:
              channel_id:
                type: string
                description: The ID of a public channel or private group that receives the webhook payloads.
              display_name:
                  type: string
                  description: The display name for this incoming webhook
              description:
                type: string
                description: The description for this incoming webhook
      responses:
        '200':
          description: Incoming webhook created successfully
          schema:
            $ref: "#/definitions/IncomingWebhook"

  '/teams/{team_id}/hooks/incoming/delete':
    post:
      tags:
        - incoming-webhooks
      summary: Delete an incoming webhook
      parameters:
        - name: team_id
          in: path
          description: Team ID the incoming webhook belongs to
          required: true
          type: string
        - in: body
          name: body
          description: The incoming webhook ID
          required: true
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
                description: The ID of the incoming webhook to delete
      responses:
        '200':
          description: Incoming webhook deleted successfully
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
                description: The incoming webhook ID

  '/teams/{team_id}/channels/{channel_id}/posts/{post_id}/reactions':
    get:
      tags:
        - posts
      summary: Lists the reactions to a post
      description: Returns a list of reactions made by all users to a given post.
      parameters:
        - name: team_id
          in: path
          description: The team ID
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID which must exist on the given team
          required: true
          type: string
        - name: post_id
          in: path
          description: The post ID which must exist in the given channel
          required: true
          type: string
      responses:
        '200':
          description: A list of all reactions made to the given post
          schema:
            type: array
            items:
              $ref: "#/definitions/Reaction"
        '400':
          description: An invalid team, channel, or post ID has been provided, the reaction has its post_id field set to another post, or the provided post_id is not in the provided channel
        '401':
          description: User is not logged in
  '/teams/{team_id}/channels/{channel_id}/posts/{post_id}/reactions/save':
    post:
      tags:
        - posts
      summary: React to a post
      description: Saves a reaction made by the current user to the given post.
      parameters:
        - name: team_id
          in: path
          description: The team ID
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID which must exist on the given team
          required: true
          type: string
        - name: post_id
          in: path
          description: The post ID which must exist in the given channel
          required: true
          type: string
        - in: body
          name: reaction
          description: The user's reaction with its post_id, user_id, and emoji_name fields set
          required: true
          schema:
            $ref: '#/definitions/Reaction'
      responses:
        '200':
          description: The reaction was saved to the server or already existed
          schema:
            $ref: '#/definitions/Reaction'
        '400':
          description: An invalid team, channel, or post ID has been provided, the reaction has its post_id field set to another post, or the provided post_id is not in the provided channel
        '401':
          description: User is not logged in
        '403':
          description: The reaction has its user_id field set for another user
  '/teams/{team_id}/channels/{channel_id}/posts/{post_id}/reactions/delete':
    post:
      tags:
        - posts
      summary: Remove a reaction from a post
      description: Deletes a reaction made by the current user from the given post.
      parameters:
        - name: team_id
          in: path
          description: The team ID
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID which must exist on the given team
          required: true
          type: string
        - name: post_id
          in: path
          description: The post ID which must exist in the given channel
          required: true
          type: string
        - in: body
          name: reaction
          description: The user's reaction with its post_id, user_id, and emoji_name fields set
          required: true
          schema:
            $ref: '#/definitions/Reaction'
      responses:
        '200':
          description: The reaction was deleted from the server or never existed
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          description: An invalid team, channel, or post ID has been provided, the reaction has its post_id field set to another post, or the provided post_id is not in the provided channel
        '401':
          description: User is not logged in
        '403':
          description: The reaction has its user_id field set for another user
definitions:
  User:
    type: object
    properties:
      id:
        type: string
      create_at:
        type: integer
      update_at:
        type: integer
      delete_at:
        type: integer
      username:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      nickname:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      password:
        type: string
      auth_data:
        type: string
      auth_service:
        type: string
      roles:
        type: string
      locale:
        type: string
      notify_props:
        type: object
      props:
        type: object
      last_password_update:
        type: integer
      last_picture_update:
        type: integer
      failed_attempts:
        type: integer
      mfa_active:
        type: boolean
      mfa_secret:
        type: string

  Team:
    type: object
    properties:
      id:
        type: string
      create_at:
        type: integer
      update_at:
        type: integer
      delete_at:
        type: integer
      display_name:
        type: string
      name:
        type: string
      description:
        type: string
      email:
        type: string
      type:
        type: string
      allowed_domains:
        type: string
      invite_id:
        type: string
      allow_open_invite:
        type: boolean

  TeamStats:
    type: object
    properties:
      team_id:
        type: string
      total_member_count:
        type: integer
      active_member_count:
        type: integer

  Channel:
    type: object
    properties:
      id:
        type: string
      create_at:
        type: integer
      update_at:
        type: integer
      delete_at:
        type: integer
      team_id:
        type: string
      type:
        type: string
      display_name:
        type: string
      name:
        type: string
      header:
        type: string
      purpose:
        type: string
      last_post_at:
        type: integer
      total_msg_count:
        type: integer
      extra_update_at:
        type: integer
      creator_id:
        type: string

  ChannelStats:
    type: object
    properties:
      channel_id:
        type: string
      member_count:
        type: integer

  ChannelMember:
    type: object
    properties:
      channel_id:
        type: string
      user_id:
        type: string
      roles:
        type: string
      last_viewed_at:
        type: integer
      msg_count:
        type: integer
      mention_count:
        type: integer
      notify_props:
        type: object
      last_update_at:
        type: integer

  ChannelData:
    type: object
    properties:
      channel:
        $ref: '#/definitions/Channel'
      member:
        $ref: '#/definitions/ChannelMember'

  Post:
    type: object
    properties:
      id:
        type: string
      create_at:
        type: integer
      update_at:
        type: integer
      delete_at:
        type: integer
      user_id:
        type: string
      channel_id:
        type: string
      root_id:
        type: string
      parent_id:
        type: string
      original_id:
        type: string
      message:
        type: string
      type:
        type: string
      props:
        type: object
      hashtag:
        type: string
      filenames:
        type: array
        items:
          type: string
      pending_post_id:
        type: string

  PostList:
    type: object
    properties:
      order:
        type: array
        items:
            type: string
        example: ["post_id1", "post_id12"]
      posts:
        type: object
        additionalProperties:
          $ref: '#/definitions/Post'

  TeamMap:
    type: object
    description: A mapping of teamIds to teams.
    properties:
      team_id:
        $ref: '#/definitions/Team'

  TeamMember:
    type: object
    properties:
      team_id:
        type: string
      user_id:
        type: string
      roles:
        type: string

  TeamUnread:
    type: object
    properties:
      team_id:
        type: string
      msg_count:
        type: integer
      mention_count:
        type: integer

  FileInfo:
    type: object
    properties:
      id:
        description: The unique identifier for this file
        type: string
      user_id:
        description: The ID of the user that uploaded this file
        type: string
      post_id:
        description: If this file is attached to a post, the ID of that post
        type: string
      create_at:
        type: integer
      update_at:
        type: integer
      delete_at:
        type: integer
      name:
        description: The name of the file
        type: string
      extension:
        description: The extension at the end of the file name
        type: string
      size:
        description: The size of the file in bytes
        type: integer
      mime_type:
        description: The MIME type of the file
        type: string
      width:
        description: If this file is an image, the width of the file
        type: integer
      height:
        description: If this file is an image, the height of the file
        type: integer
      has_preview_image:
        description: If this file is an image, whether or not it has a preview-sized version
        type: boolean

  Preference:
    type: object
    properties:
      user_id:
        description: The ID of the user that owns this preference
        type: string
      category:
        type: string
      name:
        type: string
      value:
        type: string

  UserAutocompleteInTeam:
    type: object
    properties:
      in_team:
        description: A list of user objects in the team
        type: array
        items:
          $ref: '#/definitions/User'

  UserAutocompleteInChannel:
    type: object
    properties:
      in_channel:
        description: A list of user objects in the channel
        type: array
        items:
          $ref: '#/definitions/User'
      out_of_channel:
        description: A list of user objects not in the channel
        type: array
        items:
          $ref: '#/definitions/User'

  IncomingWebhook:
    type: object
    properties:
      id:
        description: The unique identifier for this incoming webhook
        type: string
      create_at:
        type: integer
      update_at:
        type: integer
      delete_at:
        type: integer
      channel_id:
        description: The ID of a public channel or private group that receives the webhook payloads
        type: string
      description:
        description: The description for this incoming webhook
        type: string
      display_name:
        description: The display name for this incoming webhook
        type: string

  Reaction:
    type: object
    properties:
      user_id:
        description: The ID of the user that made this reaction
        type: string
      post_id:
        description: The ID of the post to which this reaction was made
        type: string
      emoji_name:
        description: The name of the emoji that was used for this reaction
        type: string
      create_at:
        description: The time at which this reaction was made
        type: integer

  Command:
    type: object
    properties:
      id:
        description: The ID of the slash command
        type: string
      token:
        description: The token which is used to verify the source of the payload
        type: string
      create_at:
        description: Timestamp when the command was created
        type: integer
      updated_at:
        description: Timestamp when the command was last updated
        type: integer
      deleted_at:
        description: Timestamp when the command was deleted, 0 if never deleted
        type: integer
      creator_id:
        description: The user id for the commands creator
        type: string
      team_id:
        description: The team id for which this command is configured
        type: string
      trigger:
        description: The string that triggers this command
        type: string
      method:
        description: Is the trigger done with HTTP Get ('G') or HTTP Post ('P')
        type: string
      username:
        description: What is the username for the response post
        type: string
      icon_url:
        description: The url to find the icon for this users avatar
        type: string
      auto_complete:
        description: Use auto complete for this command
        type: boolean
      auto_complete_desc:
        description: The description for this command shown when selecting the command
        type: string
      auto_complete_hint:
        description: The hint for this command
        type: string
      display_name:
        description: Display name for the command
        type: string
      description:
        description: Description for this command
        type: string
      url:
        description: The URL that is triggered
        type: string

  StatusOK:
    type: object
    properties:
      status:
        description: Will contain "ok" if the request was successful and there was nothing else to return
        type: string

  OpenGraph:
    type: object
    description: OpenGraph metadata of a webpage
    properties:
      type:
        type: string
      url:
        type: string
      title:
        type: string
      description:
        type: string
      determiner:
        type: string
      site_name:
        type: string
      locale:
        type: string
      locales_alternate:
        type: array
        items:
          type: string
      images:
        type: array
        items:
          type: object
          description: Image object used in OpenGraph metadata of a webpage
          properties:
            url:
              type: string
            secure_url:
              type: string
            type:
              type: string
            width:
              type: integer
            height:
              type: integer
      videos:
        type: array
        items:
          type: object
          description: Video object used in OpenGraph metadata of a webpage
          properties:
            url:
              type: string
            secure_url:
              type: string
            type:
              type: string
            width:
              type: integer
            height:
              type: integer

      audios:
        type: array
        items:
          type: object
          description: Audio object used in OpenGraph metadata of a webpage
          properties:
            url:
              type: string
            secure_url:
              type: string
            type:
              type: string
      article:
        type: object
        description: Article object used in OpenGraph metadata of a webpage, if type is article
        properties:
          published_time:
            type: string
          modified_time:
            type: string
          expiration_time:
            type: string
          section:
            type: string
          tags:
            type: array
            items:
              type: string
          authors:
            type: array
            items:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                username:
                  type: string
                gender:
                  type: string
      book:
        type: object
        description: Book object used in OpenGraph metadata of a webpage, if type is book
        properties:
          isbn:
            type: string
          release_date:
            type: string
          tags:
            type: array
            items:
              type: string
          authors:
            type: array
            items:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                username:
                  type: string
                gender:
                  type: string
      profile:
        type: object
        properties:
          first_name:
            type: string
          last_name:
            type: string
          username:
            type: string
          gender:
            type: string

  Audit:
    type: object
    properties:
      id:
        type: string
      create_at:
        type: integer
      user_id:
        type: string
      action:
        type: string
      extra_info:
        type: string
      ip_address:
        type: string
      session_id:
        type: string

  Config:
    type: object
    properties:
      ServiceSettings:
        type: object
        properties:
          SiteURL:
            type: string
          ListenAddress:
            type: string
          ConnectionSecurity:
            type: string
          TLSCertFile:
            type: string
          TLSKeyFile:
            type: string
          UseLetsEncrypt:
            type: boolean
          LetsEncryptCertificateCacheFile:
            type: string
          Forward80To443:
            type: boolean
          ReadTimeout:
            type: integer
          WriteTimeout:
            type: integer
          MaximumLoginAttempts:
            type: integer
          SegmentDeveloperKey:
            type: string
          GoogleDeveloperKey:
            type: string
          EnableOAuthServiceProvider:
            type: boolean
          EnableIncomingWebhooks:
            type: boolean
          EnableOutgoingWebhooks:
            type: boolean
          EnableCommands:
            type: boolean
          EnableOnlyAdminIntegrations:
            type: boolean
          EnablePostUsernameOverride:
            type: boolean
          EnablePostIconOverride:
            type: boolean
          EnableTesting:
            type: boolean
          EnableDeveloper:
            type: boolean
          EnableSecurityFixAlert:
            type: boolean
          EnableInsecureOutgoingConnections:
            type: boolean
          EnableMultifactorAuthentication:
            type: boolean
          EnforceMultifactorAuthentication:
            type: boolean
          AllowCorsFrom:
            type: string
          SessionLengthWebInDays:
            type: integer
          SessionLengthMobileInDays:
            type: integer
          SessionLengthSSOInDays:
            type: integer
          SessionCacheInMinutes:
            type: integer
          WebsocketSecurePort:
            type: integer
          WebsocketPort:
            type: integer
          WebserverMode:
            type: string
          EnableCustomEmoji:
            type: boolean
          RestrictCustomEmojiCreation:
            type: string
      TeamSettings:
        type: object
        properties:
          SiteName:
            type: string
          MaxUsersPerTeam:
            type: integer
          EnableTeamCreation:
            type: boolean
          EnableUserCreation:
            type: boolean
          EnableOpenServer:
            type: boolean
          RestrictCreationToDomains:
            type: string
          EnableCustomBrand:
            type: boolean
          CustomBrandText:
            type: string
          CustomDescriptionText:
            type: string
          RestrictDirectMessage:
            type: string
          RestrictTeamInvite:
            type: string
          RestrictPublicChannelManagement:
            type: string
          RestrictPrivateChannelManagement:
            type: string
          RestrictPublicChannelCreation:
            type: string
          RestrictPrivateChannelCreation:
            type: string
          RestrictPublicChannelDeletion:
            type: string
          RestrictPrivateChannelDeletion:
            type: string
          UserStatusAwayTimeout:
            type: integer
          MaxChannelsPerTeam:
            type: integer
          MaxNotificationsPerChannel:
            type: integer
      SqlSettings:
        type: object
        properties:
          DriverName:
            type: string
          DataSource:
            type: string
          DataSourceReplicas:
            type: array
            items:
              type: string
          MaxIdleConns:
            type: integer
          MaxOpenConns:
            type: integer
          Trace:
            type: boolean
          AtRestEncryptKey:
            type: string
      LogSettings:
        type: object
        properties:
          EnableConsole:
            type: boolean
          ConsoleLevel:
            type: string
          EnableFile:
            type: boolean
          FileLevel:
            type: string
          FileFormat:
            type: string
          FileLocation:
            type: string
          EnableWebhookDebugging:
            type: boolean
          EnableDiagnostics:
            type: boolean
      PasswordSettings:
        type: object
        properties:
          MinimumLength:
            type: integer
          Lowercase:
            type: boolean
          Number:
            type: boolean
          Uppercase:
            type: boolean
          Symbol:
            type: boolean
      FileSettings:
        type: object
        properties:
          MaxFileSize:
            type: integer
          DriverName:
            type: string
          Directory:
            type: string
          EnablePublicLink:
            type: boolean
          PublicLinkSalt:
            type: string
          ThumbnailWidth:
            type: integer
          ThumbnailHeight:
            type: integer
          PreviewWidth:
            type: integer
          PreviewHeight:
            type: integer
          ProfileWidth:
            type: integer
          ProfileHeight:
            type: integer
          InitialFont:
            type: string
          AmazonS3AccessKeyId:
            type: string
          AmazonS3SecretAccessKey:
            type: string
          AmazonS3Bucket:
            type: string
          AmazonS3Region:
            type: string
          AmazonS3Endpoint:
            type: string
          AmazonS3SSL:
            type: boolean
      EmailSettings:
        type: object
        properties:
          EnableSignUpWithEmail:
            type: boolean
          EnableSignInWithEmail:
            type: boolean
          EnableSignInWithUsername:
            type: boolean
          SendEmailNotifications:
            type: boolean
          RequireEmailVerification:
            type: boolean
          FeedbackName:
            type: string
          FeedbackEmail:
            type: string
          FeedbackOrganization:
            type: string
          SMTPUsername:
            type: string
          SMTPPassword:
            type: string
          SMTPServer:
            type: string
          SMTPPort:
            type: string
          ConnectionSecurity:
            type: string
          InviteSalt:
            type: string
          PasswordResetSalt:
            type: string
          SendPushNotifications:
            type: boolean
          PushNotificationServer:
            type: string
          PushNotificationContents:
            type: string
          EnableEmailBatching:
            type: boolean
          EmailBatchingBufferSize:
            type: integer
          EmailBatchingInterval:
            type: integer
      RateLimitSettings:
        type: object
        properties:
          Enable:
            type: boolean
          PerSec:
            type: integer
          MaxBurst:
            type: integer
          MemoryStoreSize:
            type: integer
          VaryByRemoteAddr:
            type: boolean
          VaryByHeader:
            type: string
      PrivacySettings:
        type: object
        properties:
          ShowEmailAddress:
            type: boolean
          ShowFullName:
            type: boolean
      SupportSettings:
        type: object
        properties:
          TermsOfServiceLink:
            type: string
          PrivacyPolicyLink:
            type: string
          AboutLink:
            type: string
          HelpLink:
            type: string
          ReportAProblemLink:
            type: string
          SupportEmail:
            type: string
      GitLabSettings:
        type: object
        properties:
          Enable:
            type: boolean
          Secret:
            type: string
          Id:
            type: string
          Scope:
            type: string
          AuthEndpoint:
            type: string
          TokenEndpoint:
            type: string
          UserApiEndpoint:
            type: string
      GoogleSettings:
        type: object
        properties:
          Enable:
            type: boolean
          Secret:
            type: string
          Id:
            type: string
          Scope:
            type: string
          AuthEndpoint:
            type: string
          TokenEndpoint:
            type: string
          UserApiEndpoint:
            type: string
      Office365Settings:
        type: object
        properties:
          Enable:
            type: boolean
          Secret:
            type: string
          Id:
            type: string
          Scope:
            type: string
          AuthEndpoint:
            type: string
          TokenEndpoint:
            type: string
          UserApiEndpoint:
            type: string
      LdapSettings:
        type: object
        properties:
          Enable:
            type: boolean
          LdapServer:
            type: string
          LdapPort:
            type: integer
          ConnectionSecurity:
            type: string
          BaseDN:
            type: string
          BindUsername:
            type: string
          BindPassword:
            type: string
          UserFilter:
            type: string
          FirstNameAttribute:
            type: string
          LastNameAttribute:
            type: string
          EmailAttribute:
            type: string
          UsernameAttribute:
            type: string
          NicknameAttribute:
            type: string
          IdAttribute:
            type: string
          PositionAttribute:
            type: string
          SyncIntervalMinutes:
            type: integer
          SkipCertificateVerification:
            type: boolean
          QueryTimeout:
            type: integer
          MaxPageSize:
            type: integer
          LoginFieldName:
            type: string
      ComplianceSettings:
        type: object
        properties:
          Enable:
            type: boolean
          Directory:
            type: string
          EnableDaily:
            type: boolean
      LocalizationSettings:
        type: object
        properties:
          DefaultServerLocale:
            type: string
          DefaultClientLocale:
            type: string
          AvailableLocales:
            type: string
      SamlSettings:
        type: object
        properties:
          Enable:
            type: boolean
          Verify:
            type: boolean
          Encrypt:
            type: boolean
          IdpUrl:
            type: string
          IdpDescriptorUrl:
            type: string
          AssertionConsumerServiceURL:
            type: string
          IdpCertificateFile:
            type: string
          PublicCertificateFile:
            type: string
          PrivateKeyFile:
            type: string
          FirstNameAttribute:
            type: string
          LastNameAttribute:
            type: string
          EmailAttribute:
            type: string
          UsernameAttribute:
            type: string
          NicknameAttribute:
            type: string
          LocaleAttribute:
            type: string
          PositionAttribute:
            type: string
          LoginButtonText:
            type: string
      NativeAppSettings:
        type: object
        properties:
          AppDownloadLink:
            type: string
          AndroidAppDownloadLink:
            type: string
          IosAppDownloadLink:
            type: string
      ClusterSettings:
        type: object
        properties:
          Enable:
            type: boolean
          InterNodeListenAddress:
            type: string
          InterNodeUrls:
            type: array
            items:
              type: string
      MetricsSettings:
        type: object
        properties:
          Enable:
            type: boolean
          BlockProfileRate:
            type: integer
          ListenAddress:
            type: string
      AnalyticsSettings:
        type: object
        properties:
          MaxUsersForStatistics:
            type: integer
      WebrtcSettings:
        type: object
        properties:
          Enable:
            type: boolean
          GatewayWebsocketUrl:
            type: string
          GatewayAdminUrl:
            type: string
          GatewayAdminSecret:
            type: string
          StunURI:
            type: string
          TurnURI:
            type: string
          TurnUsername:
            type: string
          TurnSharedKey:
            type: string

externalDocs:
  description: Find out more about Mattermost
  url: 'https://about.mattermost.com'
