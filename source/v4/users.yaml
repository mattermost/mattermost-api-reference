  /users:
    post:
      tags:
        - users
      summary: Create a user
      description: |
        Create a new user on the system.
        ##### Permissions
        No permission required but user creation can be controlled by server configuration.
      parameters:
        - in: body
          name: body
          description: User object to be created
          required: true
          schema:
            type: object
            required:
              - email
              - username
              - password
            properties:
              email:
                type: string
              username:
                type: string
              first_name:
                 type: string
              last_name:
                type: string
              nickname:
                type: string
              password:
                type: string
              locale:
                type: string
              props:
                type: object
      responses:
        '201':
          description: User creation successful
          schema:
            $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '403':
          $ref: '#/responses/Forbidden'

    get:
      tags:
        - users
      summary: Get users
      description: |
        Get a page of a list of users. Based on query string parameters, select users from a team, channel, or select users not in a specific channel.
        ##### Permissions
        Requires an active session and (if specified) membership to the channel or team being selected from.
      parameters:
        - name: page
          in: query
          description: The page to select.
          default: "0"
          type: string
        - name: per_page
          in: query
          description: The number of users per page.
          default: "60"
          type: string
        - name: in_team
          in: query
          description: The ID of the team to get users for.
          type: string
        - name: in_channel
          in: query
          description: The ID of the channel to get users for.
          type: string
        - name: not_in_channel
          in: query
          description: The ID of the channel to exclude users for. Must be used with "in_channel" query parameter.
          type: string
      responses:
        '200':
          description: User page retrieval successful
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/ids:
    post:
      tags:
        - users
      summary: Get users by ids
      description: |
        Get a list of users based on a provided list of user ids.
        ##### Permissions
        Requires an active session but no other permissions.
      parameters:
        - in: body
          name: body
          description: List of user ids
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: User list retrieval successful
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'

  /users/{user_id}:
    get:
      tags:
        - users
      summary: Get a user
      description: |
        Get a user a object. Sensitive information will be sanitized out.
        ##### Permissions
        Requires an active session but no other permissions.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
      responses:
        '200':
          description: User retrieval successful
          schema:
            $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '404':
          $ref: '#/responses/NotFound'

    put:
      tags:
        - users
      summary: Update a user
      description: |
        Update a user by providing the user object. The fields that can be updated are defined in the request body, all other provided fields will be ignored.
        ##### Permissions
        Must be logged in as the user being updated or have the `edit_other_users` permission.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
        - in: body
          name: body
          description: User object that is to be updated
          required: true
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
              email:
                type: string
              username:
                type: string
              first_name:
                 type: string
              last_name:
                type: string
              nickname:
                type: string
              locale:
                type: string
              position:
                type: string
              props:
                type: object
              notify_props:
                type: object
      responses:
        '200':
          description: User update successful
          schema:
            $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

    delete:
      tags:
        - users
      summary: Deactivate a user account.
      description: |
        Deactivates the user by archiving its user object.
        ##### Permissions
        Must be logged in as the user being deactivated or have the `edit_other_users` permission.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
      responses:
        '200':
          description: User deactivation successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /users/{user_id}/patch:
    put:
      tags:
        - users
      summary: Patch a user
      description: |
        Partially update a user by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.
        ##### Permissions
        Must be logged in as the user being updated or have the `edit_other_users` permission.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
        - in: body
          name: body
          description: User object that is to be updated
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              username:
                type: string
              first_name:
                 type: string
              last_name:
                type: string
              nickname:
                type: string
              locale:
                type: string
              position:
                type: string
              props:
                type: object
              notify_props:
                type: object
      responses:
        '200':
          description: User patch successful
          schema:
            $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/{user_id}/roles:
    put:
      tags:
        - users
      summary: Update a user's roles
      description: |
        Update a user's system-level roles. Valid user roles are "system_user", "system_admin" or both of them. Overwrites any previously assigned system-level roles.
        ##### Permissions
        Must have the `manage_roles` permission.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
        - in: body
          name: roles
          description: Space-delimited system roles to assign to the user
          required: true
          schema:
            type: object
            required:
              - roles
            properties:
              roles:
                type: string
      responses:
        '200':
          description: User roles update successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/{user_id}/image:
    get:
      tags:
        - users
      summary: Get user's profile image
      description: |
        Get a user's profile image based on user_id string parameter.
        ##### Permissions
        Must be logged in.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
      responses:
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
        '501':
          $ref: '#/responses/NotImplemented'
    post:
      tags:
        - users
      summary: Set user's profile image
      description: |
        Set a user's profile image based on user_id string parameter.
        ##### Permissions
        Must be logged in as the user being updated or have the `edit_other_users` permission.
      parameters:
        - name: files
          in: formData
          description: A file/image to be uploaded
          required: true
          type: image
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
      responses:
        '200':
          description: Profile image set successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
        '501':
          $ref: '#/responses/NotImplemented'

  /users/username/{username}:
    get:
      tags:
        - users
      summary: Get a user by username
      description: |
        Get a user object by providing a username. Sensitive information will be sanitized out.
        ##### Permissions
        Requires an active session but no other permissions.
      parameters:
        - name: username
          in: path
          description: Username
          required: true
          type: string
      responses:
        '200':
          description: User retrieval successful
          schema:
            $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '404':
          $ref: '#/responses/NotFound'

  /users/password/reset:
    post:
      tags:
        - users
      summary: Reset password
      description: |
        Update the password for a user using a one-use, timed recovery code tied to the user's account. Only works for non-SSO users.
        ##### Permissions
        No permissions required.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - current_password
              - new_password
            properties:
              current_password:
                description: The current password for the user
                type: string
              new_password:
                description: The new password for the user
                type: string
      responses:
        '200':
          description: User password update successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/{user_id}/password:
    put:
      tags:
        - users
      summary: Update a user's password
      description: |
        Update a user's password. New password must meet password policy set by server configuration.
        ##### Permissions
        Must be logged in as the user the password is being changed for or have `manage_system` permission.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - code
              - new_password
            properties:
              code:
                description: The recovery code
                type: string
              new_password:
                description: The new password for the user
                type: string
      responses:
        '200':
          description: User password update successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/password/reset/send:
    post:
      tags:
        - users
      summary: Send password reset email
      description: |
        Send an email containing a link for resetting the user's password. The link will contain a one-use, timed recovery code tied to the user's account. Only works for non-SSO users.
        ##### Permissions
        No permissions required.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
            properties:
              email:
                description: The email of the user
                type: string
      responses:
        '200':
          description: Email sent if account exists
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/email/{email}:
    get:
      tags:
        - users
      summary: Get a user by email
      description: |
        Get a user object by providing a user email. Sensitive information will be sanitized out.
        ##### Permissions
        Requires an active session but no other permissions.
      parameters:
        - name: email
          in: path
          description: User Email
          required: true
          type: string
      responses:
        '200':
          description: User retrieval successful
          schema:
            $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '404':
          $ref: '#/responses/NotFound'

  /users/{user_id}/sessions:
    get:
      tags:
        - users
      summary: Get user's sessions
      description: |
        Get a list of sessions by providing the user GUID. Sensitive information will be sanitized out.
        ##### Permissions
        Must be logged in as the user being updated or have the `edit_other_users` permission.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
      responses:
        '200':
          description: User session retrieval successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Session'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/{user_id}/sessions/revoke:
    post:
      tags:
        - users
      summary: Revoke a user session
      description: |
        Revokes a user session from the provided user id and session id strings.
        ##### Permissions
        Must be logged in as the user being updated or have the `edit_other_users` permission.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - session_id
            properties:
              session_id:
                description: The session GUID to revoke.
                type: string
      responses:
        '200':
          description: User session revoked successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
          
  /users/{user_id}/audits:
    get:
      tags:
        - users
      summary: Get user's audits
      description: |
        Get a list of audit by providing the user GUID.
        ##### Permissions
        Must be logged in as the user or have the `edit_other_users` permission.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
      responses:
        '200':
          description: User audits retrieval successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Audit'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/{user_id}/verify/email:
    post:
      tags:
        - users
      summary: Verify user email
      description: |
        Verify the email used by a user to sign-up their account with.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - userId
              - hashId
            properties:
              userId:
                description: The User GUID
                type: string
              hashId:
                description: The hash with UserId and InviteSaltId
                type: string
      responses:
        '200':
          description: User verification successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
