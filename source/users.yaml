  /users/create:
    post:
      tags:
        - users
      summary: Create a new user
      parameters:
        - in: body
          name: body
          description: Abbreviated user object that is to be created
          required: true
          schema:
            type: object
            required:
              - email
              - username
              - password
            properties:
              email:
                type: string
              username:
                type: string
              first_name:
                 type: string
              last_name:
                type: string
              nickname:
                type: string
              password:
                type: string
              locale:
                type: string
              props:
                type: object
      responses:
        '200':
          description: User creation successful
          schema:
            $ref: '#/definitions/User'

  /users/me:
    get:
      tags:
        - users
      summary: Get your user object
      description: Returns the user object for the currently logged in user.
      responses:
        '200':
          description: User object retrieval successful
          schema:
            $ref: '#/definitions/User'

  /users/login:
    post:
      tags:
        - users
      summary: Login to a user account
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - login_id
              - password
            properties:
              login_id:
                type: string
                description: Username, email, or AD/LDAP ID of a user
              password:
                type: string
                description: User's password
              token:
                type: string
                description: Multi-factor authentication token, if required by the user
              device_id:
                type: string
                description: Mobile device ID, for Android or iOS
      responses:
        '200':
          description: User logged in successfuly
          headers:
            token:
              type: string
              description: Access token to be included with future requests
          schema:
            $ref: '#/definitions/User'

  /users/logout:
    post:
      tags:
        - users
      summary: Logout of a user account
      responses:
        '200':
          description: User logged out successfuly
          schema:
            properties:
              user_id:
                type: string

  '/users/{offset}/{limit}':
    get:
      tags:
        - users
      summary: Get users
      description: Get a page of user objects organized into a map using user ID as the key.
      parameters:
        - name: offset
          in: path
          description: The offset to start the page at, use 0 for the first page
          required: true
          type: integer
        - name: limit
          in: path
          description: The limit of users to return per page
          required: true
          type: integer
      responses:
        '200':
          description: Users retreived successfully
          schema:
            type: object
            additionalProperties:
              $ref: "#/definitions/User"

  '/teams/{team_id}/users/{offset}/{limit}':
    get:
      tags:
        - users
      summary: Get users in a team
      description: Get a page of user objects in a team, organized into a map using user ID as the key.
      parameters:
        - name: team_id
          in: path
          description: The team ID the users are in
          required: true
          type: string
        - name: offset
          in: path
          description: The offset to start the page at, use 0 for the first page
          required: true
          type: integer
        - name: limit
          in: path
          description: The limit of users to return per page
          required: true
          type: integer
      responses:
        '200':
          description: Users retrieved successfully
          schema:
            type: object
            additionalProperties:
              $ref: "#/definitions/User"

  '/users/search':
    post:
      tags:
        - users
      summary: Search users
      description: Get a list of user objects matching some search parameters.
      parameters:
        - in: body
          name: body
          description: Search parameter
          required: true
          schema:
            type: object
            required:
              - term
            properties:
              term:
                type: string
                description: The search term can be the username, nickname, full name or email of the user you're looking for. In some server configurations full name and email search may be blocked by the System Administrator.
              team_id:
                type: string
                description: Provide a team ID if you'd like to restrict search to a single team.
              in_channel_id:
                type: string
                description: Provide an in channel ID if you'd like to only search for users who are in a channel.
              not_in_channel_id:
                type: string
                description: Provide a not in channel ID if you'd like to only search for users who are not in a channel.
              allow_inactive:
                type: boolean
                description: Set this to `true` if you would like to include inactive users in your search.
      responses:
        '200':
          description: Profiles retreived successfully
          schema:
            type: object
            additionalProperties:
              $ref: "#/definitions/User"

  '/users/name/{username}':
    get:
      tags:
        - users
      summary: Get sanitized user object by username
      description: Gets the sanitized User object with the given username.
      parameters:
        - name: username
          in: path
          description: The username for a specific user
          required: true
          type: string
      responses:
        '200':
          description: User object retrieval successful
          schema:
            $ref: '#/definitions/User'

  '/users/ids':
    post:
      tags:
        - users
      summary: Get users by IDs
      description: Get a map of sanitized user objects by a list of user IDs.
      parameters:
        - in: body
          name: body
          description: A list of user IDs to fetch
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Profiles retreived successfully
          schema:
            type: object
            additionalProperties:
              $ref: "#/definitions/User"

  '/teams/{team_id}/channels/{channel_id}/users/{offset}/{limit}':
    post:
      tags:
        - users
      summary: Get users in a channel
      description: Get a map of sanitized user objects that are in the specified channel.
      parameters:
        - name: team_id
          in: path
          description: The team ID
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID
          required: true
          type: string
        - name: offset
          in: path
          description: The offset to start the page at, use 0 for the first page
          required: true
          type: integer
        - name: limit
          in: path
          description: The limit of users to return per page
          required: true
          type: integer
      responses:
        '200':
          description: Profiles retreived successfully
          schema:
            type: object
            additionalProperties:
              $ref: "#/definitions/User"

  '/teams/{team_id}/channels/{channel_id}/users/not_in_channel/{offset}/{limit}':
    post:
      tags:
        - users
      summary: Get users not in a channel
      description: Get a map of sanitized user objects that are on the team but not in the channel.
      parameters:
        - name: team_id
          in: path
          description: The team ID
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID the users are not part of
          required: true
          type: string
        - name: offset
          in: path
          description: The offset to start the page at, use 0 for the first page
          required: true
          type: integer
        - name: limit
          in: path
          description: The limit of users to return per page
          required: true
          type: integer
      responses:
        '200':
          description: Profiles retreived successfully
          schema:
            type: object
            additionalProperties:
              $ref: "#/definitions/User"

  /users/update:
    post:
      tags:
        - users
      summary: Update a user object
      parameters:
        - in: body
          name: body
          description: User object to update with
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: User creation successful
          schema:
            $ref: '#/definitions/User'

  /users/update_roles:
    post:
      tags:
        - users
      summary: Update a user's roles
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - user_id
              - roles
            properties:
              user_id:
                type: string
                description: ID of the user to update the roles of
              team_id:
                type: string
                description: ID of the team the user is on
              roles:
                type: string
                description: Space-delimited list of roles to give the user
      responses:
        '200':
          description: User roles updated successful
          schema:
            type: object
            properties:
              user_id:
                type: string
          examples:
            application/json:
              user_id: "string"

  /users/update_active:
    post:
      tags:
        - users
      summary: Update whether a user's account is active
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - user_id
              - active
            properties:
              user_id:
                type: string
                description: ID of the user to set active/inactive
              active:
                type: boolean
                description: Use `true` to set the user active, `false` for inactive
      responses:
        '200':
          description: User active status successfully updated
          schema:
            $ref: '#/definitions/User'

  /users/update_notify:
    post:
      tags:
        - users
      summary: Update a user's notification properties
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
      responses:
        '200':
          description: User notification properties successfully updated
          schema:
            $ref: '#/definitions/User'

  /users/newpassword:
    post:
      tags:
        - users
      summary: Update a user's password
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - user_id
              - current_password
              - new_password
            properties:
              user_id:
                type: string
                description: The ID of the user to change the password for
              current_password:
                type: string
                description: The user's current password
              new_password:
                 type: string
                 description: The user's new password
      responses:
        '200':
          description: User password updated successfully
          schema:
            type: object
            properties:
              user_id:
                type: string
          examples:
            application/json:
              user_id: "string"

  /users/send_password_reset:
    post:
      tags:
        - users
      summary: Send a password reset email
      description: Send an email to the user with a link to reset their password. User must use the email/password sign-in method.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                description: The email of the user to send the reset link to
      responses:
        '200':
          description: Password reset email sent successfully
          schema:
            type: object
            properties:
              email:
                type: string
          examples:
            application/json:
              email: someone@example.com

  '/users/autocomplete':
    get:
      tags:
        - users
      summary: Autocomplete users
      description: Get a list of users on the system by matching the provided search term against username, full name and nickname.
      parameters:
        - name: term
          in: query
          description: The term to match against username, full name or nickname
          required: true
          type: string
      responses:
        '200':
          description: Autocomplete users retreived successfully
          schema:
            type: array
            items:
              $ref: "#/definitions/User"

  '/teams/{team_id}/users/autocomplete':
    get:
      tags:
        - users
      summary: Autocomplete users in a team
      description: Get a list of users on the specified team by matching the term against username, full name and nickname.
      parameters:
        - name: team_id
          in: path
          description: The team ID the users are in
          required: true
          type: string
        - name: term
          in: query
          description: The term to match against username, full name or nickname
          required: true
          type: string
      responses:
        '200':
          description: Autocomplete users retreived successfully
          schema:
            type: object
            additionalProperties:
              $ref: "#/definitions/UserAutocompleteInTeam"

  '/teams/{team_id}/channels/{channel_id}/users/autocomplete':
    get:
      tags:
        - users
      summary: Autocomplete users in a channel
      description: Get a list of users in the specified channel by matching the term against username, full name and nickname. Also returns a list of users matching the term that are on the team but not in the channel.
      parameters:
        - name: team_id
          in: path
          description: The team ID the users are in
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID the users are in
          required: true
          type: string
        - name: term
          in: query
          description: The term to match against username, full name or nickname
          required: true
          type: string
      responses:
        '200':
          description: Autocomplete users retreived successfully
          schema:
            type: object
            additionalProperties:
              $ref: "#/definitions/UserAutocompleteInChannel"

