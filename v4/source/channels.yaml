  /channels:
    post:
      tags:
        - channels
      summary: Create a channel
      description: |
        Create a new channel.
        ##### Permissions
        If creating a public channel, `create_public_channel` permission is required. If creating a private channel, `create_private_channel` permission is required.
      parameters:
        - in: body
          name: body
          description: Channel object to be created
          required: true
          schema:
            type: object
            required:
              - name
              - display_name
              - type
              - team_id
            properties:
              team_id:
                type: string
                description: The team ID of the team to create the channel on
              name:
                type: string
                description: The unique handle for the channel, will be present in the channel URL
              display_name:
                type: string
                description: The non-unique UI name for the channel
              purpose:
                type: string
                description: A short description of the purpose of the channel
              header:
                type: string
                description: Markdown-formatted text to display in the header of the channel
              type:
                type: string
                description: "'O' for a public channel, 'P' for a private channel"
      responses:
        '201':
          description: Channel creation successful
          schema:
            $ref: '#/definitions/Channel'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            channel := &model.Channel{DisplayName: <YOUR CHANNEL DISPLAYNAME>, Name: <YOUR CHANNEL NAME>, Type: <CHANNEL TYPE OPEN/PRIVATE>, TeamId: <YOUR TEAM ID>}

            // CreateChannel
            rchannel, resp := Client.CreateChannel(channel)

  /channels/direct:
    post:
      tags:
        - channels
      summary: Create a direct message channel
      description: |
        Create a new direct message channel between two users.
        ##### Permissions
        Must be one of the two users and have `create_direct_channel` permission. Having the `manage_system` permission voids the previous requirements.
      parameters:
        - in: body
          name: body
          description: The two user ids to be in the direct message
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '201':
          description: Direct channel creation successful
          schema:
            $ref: '#/definitions/Channel'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // CreateDirectChannel
            dm, resp := Client.CreateDirectChannel(<ID OF User1>, <ID OF User2>)

  /channels/group:
    post:
      tags:
        - channels
      summary: Create a group message channel
      description: |
        Create a new group message channel to group of users. If the logged in user's id is not included in the list, it will be appended to the end.
        ##### Permissions
        Must have `create_group_channel` permission.
      parameters:
        - in: body
          name: body
          description: User ids to be in the group message channel
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '201':
          description: Group channel creation successful
          schema:
            $ref: '#/definitions/Channel'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            userIds := []string{<ID OF User1>, <ID OF User2>, <ID OF User3> ...}

            // CreateGroupChannel
            rgc, resp := Client.CreateGroupChannel(userIds)

  /teams/{team_id}/channels/ids:
    post:
      tags:
        - channels
      summary: Get a list of channels by ids
      description: |
        Get a list of public channels on a team by id.
        ##### Permissions
        `view_team` for the team the channels are on.
      parameters:
        - name: team_id
          in: path
          description: Team GUID
          required: true
          type: string
        - in: body
          name: body
          description: List of channel ids
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Channel list retrieval successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Channel'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '404':
          $ref: '#/responses/NotFound'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            channelIds := []string{<ID OF CHANNEL1>, <ID OF CHANNEL2>, ...}

            // GetPublicChannelsByIdsForTeam
            channels, resp := Client.GetPublicChannelsByIdsForTeam(<TEAMID>, channelIds)

  '/channels/{channel_id}':
    get:
      tags:
        - channels
      summary: Get a channel
      description: |
        Get channel from the provided channel id string.
        ##### Permissions
        `read_channel` permission for the channel.
      parameters:
        - name: channel_id
          in: path
          description: Channel GUID
          required: true
          type: string
      responses:
        '200':
          description: Channel retrieval successful
          schema:
            $ref: '#/definitions/Channel'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // GetChannel
            channel, resp := Client.GetChannel(<CHANNELID>, "")

    put:
      tags:
        - channels
      summary: Update a channel
      description: |
        Update a channel. The fields that can be updated are listed as paramters. Omitted fields will be treated as blanks.
        ##### Permissions
        If updating a public channel, `manage_public_channel_members` permission is required. If updating a private channel, `manage_private_channel_members` permission is required.
      parameters:
        - name: channel_id
          in: path
          description: Channel GUID
          required: true
          type: string
        - in: body
          name: body
          description: Channel object to be updated
          required: true
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
                description: The channel's id, not updatable
              name:
                type: string
                description: The unique handle for the channel, will be present in the channel URL
              display_name:
                type: string
                description: The non-unique UI name for the channel
              purpose:
                type: string
                description: A short description of the purpose of the channel
              header:
                type: string
                description: Markdown-formatted text to display in the header of the channel
              type:
                type: string
                description: "'O' for a public channel, 'P' for a private channel"
      responses:
        '200':
          description: Channel update successful
          schema:
            $ref: '#/definitions/Channel'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            channel := &model.Channel{DisplayName: <YOUR CHANNEL NEW DISPLAYNAME>, ChannelId: <CHANNELID>, TeamId: <YOUR TEAM ID>}

            // UpdateChannel
            updatedChannel, resp := Client.UpdateChannel(channel)

    delete:
      tags:
        - channels
      summary: Delete a channel
      description: |
        Soft deletes a channel, by marking the channel as deleted in the database. Soft deleted channels will not be accessible in the user interface.
        ##### Permissions
        `delete_public_channel` permission if the channel is public,
        `delete_private_channel` permission if the channel is private,
        or have `manage_system` permission.
      parameters:
        - name: channel_id
          in: path
          description: Channel GUID
          required: true
          type: string
      responses:
        '200':
          description: Channel deletion successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // DeleteChannel
            pass, resp := Client.DeleteChannel(<CHANNELID>)

  '/channels/{channel_id}/patch':
    put:
      tags:
        - channels
      summary: Patch a channel
      description: |
        Partially update a channel by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.
        ##### Permissions
        If updating a public channel, `manage_public_channel_members` permission is required. If updating a private channel, `manage_private_channel_members` permission is required.
      parameters:
        - name: channel_id
          in: path
          description: Channel GUID
          required: true
          type: string
        - in: body
          name: body
          description: Channel object to be updated
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: The unique handle for the channel, will be present in the channel URL
              display_name:
                type: string
                description: The non-unique UI name for the channel
              purpose:
                type: string
                description: A short description of the purpose of the channel
              header:
                type: string
                description: Markdown-formatted text to display in the header of the channel
      responses:
        '200':
          description: Channel patch successful
          schema:
            $ref: '#/definitions/Channel'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            patch := &model.ChannelPatch{
              Name:        new(string),
              DisplayName: new(string),
              Header:      new(string),
              Purpose:     new(string),
            }
            *patch.Name = "<SOME_NEW_NAME>"
            *patch.DisplayName = "<SOME_NEW_DISPLAYNAME>"
            *patch.Header = "<SOME_NEW_HEADER>"
            *patch.Purpose = "<SOME_NEW_PURPOSE>"

            // PatchChannel
            channel, resp := Client.PatchChannel(<CHANNELID>, patch)

  '/channels/{channel_id}/convert':
      post:
        tags:
          - channels
        summary: Convert a channel from public to private
        description: |
          Convert into private channel from the provided channel id string.

          __Minimum server version__: 4.10

          ##### Permissions
          `manage_team` permission for the team of the channel.
        parameters:
          - name: channel_id
            in: path
            description: Channel GUID
            required: true
            type: string
        responses:
          '200':
            description: Channel conversion successful
            schema:
              $ref: '#/definitions/Channel'
          '400':
            $ref: '#/responses/BadRequest'
          '401':
            $ref: '#/responses/Unauthorized'
          '403':
            $ref: '#/responses/Forbidden'
          '404':
            $ref: '#/responses/NotFound'
        x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // ConvertChannelToPrivate
            convertedChannel, resp := Client.ConvertChannelToPrivate(<CHANNELID>)

  '/channels/{channel_id}/restore':
      post:
        tags:
          - channels
        summary: Restore a channel
        description: |
          Restore channel from the provided channel id string.

          __Minimum server version__: 3.10

          ##### Permissions
          `manage_team` permission for the team of the channel.
        parameters:
          - name: channel_id
            in: path
            description: Channel GUID
            required: true
            type: string
        responses:
          '200':
            description: Channel restore successful
            schema:
              $ref: '#/definitions/Channel'
          '401':
            $ref: '#/responses/Unauthorized'
          '403':
            $ref: '#/responses/Forbidden'
          '404':
            $ref: '#/responses/NotFound'

  '/channels/{channel_id}/stats':
    get:
      tags:
        - channels
      summary: Get channel statistics
      description: |
        Get statistics for a channel.
        ##### Permissions
        Must have the `read_channel` permission.
      parameters:
        - name: channel_id
          in: path
          description: Channel GUID
          required: true
          type: string
      responses:
        '200':
          description: Channel statistics retrieval successful
          schema:
            $ref: '#/definitions/ChannelStats'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // GetChannelStats
            stats, resp := Client.GetChannelStats(<CHANNELID>)

  '/channels/{channel_id}/pinned':
    get:
      tags:
        - channels
      summary: Get a channel's pinned posts
      description: Get a list of pinned posts for channel.
      parameters:
        - name: channel_id
          in: path
          description: Channel GUID
          required: true
          type: string
      responses:
        '200':
          description: The list of channel pinned posts
          schema:
            $ref: '#/definitions/PostList'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // GetPinnedPosts
            posts, resp := Client.GetPinnedPosts(<CHANNELID>, "")

  '/teams/{team_id}/channels':
    get:
      tags:
        - channels
      summary: Get public channels
      description: |
        Get a page of public channels on a team based on query string parameters - page and per_page.
        ##### Permissions
        Must be authenticated and have the `list_team_channels` permission.
      parameters:
        - name: team_id
          in: path
          description: Team GUID
          required: true
          type: string
        - name: page
          in: query
          description: The page to select.
          default: "0"
          type: string
        - name: per_page
          in: query
          description: The number of public channels per page.
          default: "60"
          type: string
      responses:
        '200':
          description: Channels retrieval successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Channel'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")
            // GetPublicChannelsForTeam
            channels, resp := Client.GetPublicChannelsForTeam(<TEAMID>, 0, 100, "")

  '/teams/{team_id}/channels/deleted':
    get:
      tags:
        - channels
      summary: Get deleted channels
      description: |
        Get a page of deleted channels on a team based on query string parameters - team_id, page and per_page.

        __Minimum server version__: 3.10

        ##### Permissions
        Must be authenticated and have the `manage_team` permission.
      parameters:
        - name: team_id
          in: path
          description: Team GUID
          required: true
          type: string
        - name: page
          in: query
          description: The page to select.
          default: "0"
          type: string
        - name: per_page
          in: query
          description: The number of public channels per page.
          default: "60"
          type: string
      responses:
        '200':
          description: Channels retrieval successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Channel'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  '/teams/{team_id}/channels/autocomplete':
    get:
      tags:
        - channels
      summary: Autocomplete channels
      description: |
        Autocomplete public channels on a team based on the search term provided in the request URL.

        __Minimum server version__: 4.7

        ##### Permissions
        Must have the `list_team_channels` permission.
      parameters:
        - name: team_id
          in: path
          description: Team GUID
          required: true
          type: string
        - name: name
          in: query
          description: Name or display name
          required: true
          type: string
      responses:
        '200':
          description: Channels autocomplete successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Channel'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  '/teams/{team_id}/channels/search':
    post:
      tags:
        - channels
      summary: Search channels
      description: |
        Search public channels on a team based on the search term provided in the request body.
        ##### Permissions
        Must have the `list_team_channels` permission.
      parameters:
        - name: team_id
          in: path
          description: Team GUID
          required: true
          type: string
        - in: body
          name: body
          description: Search criteria
          required: true
          schema:
            type: object
            required:
              - term
            properties:
              term:
                description: The search term to match against the name or display name of channels
                type: string
      responses:
        '201':
          description: Channels search successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Channel'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            search := &model.ChannelSearch{Term: <CHANNEL DISPLAYNAME>}

            // SearchChannels
            channels, resp := Client.SearchChannels(<TEAMID>, search)

  '/teams/{team_id}/channels/name/{channel_name}':
    get:
      tags:
        - channels
      summary: Get a channel by name
      description: |
        Gets channel from the provided team id and channel name strings.
        ##### Permissions
        `read_channel` permission for the channel.
      parameters:
        - name: team_id
          in: path
          description: Team GUID
          required: true
          type: string
        - name: channel_name
          in: path
          description: Channel Name
          required: true
          type: string
      responses:
        '200':
          description: Channel retrieval successful
          schema:
            $ref: '#/definitions/Channel'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // GetChannelByName
            channel, resp := Client.GetChannelByName(<CHANNEL NAME>, <TEAMID>, "")

  '/teams/name/{team_name}/channels/name/{channel_name}':
    get:
      tags:
        - channels
      summary: Get a channel by name and team name
      description: |
        Gets a channel from the provided team name and channel name strings.
        ##### Permissions
        `read_channel` permission for the channel.
      parameters:
        - name: team_name
          in: path
          description: Team Name
          required: true
          type: string
        - name: channel_name
          in: path
          description: Channel Name
          required: true
          type: string
      responses:
        '200':
          description: Channel retrieval successful
          schema:
            $ref: '#/definitions/Channel'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // GetChannelByNameForTeamName
            channel, resp = Client.GetChannelByNameForTeamName(<CHANNEL NAME>, <TEAM NAME>, "")

  '/channels/{channel_id}/members':
    get:
      tags:
        - channels
      summary: Get channel members
      description: |
        Get a page of members for a channel.
        ##### Permissions
        `read_channel` permission for the channel.
      parameters:
        - name: channel_id
          in: path
          description: Channel GUID
          required: true
          type: string
        - name: page
          in: query
          description: The page to select.
          default: "0"
          type: string
        - name: per_page
          in: query
          description: The number of members per page.
          default: "60"
          type: string
      responses:
        '200':
          description: Channel members retrieval successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ChannelMember'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // GetChannelMembers
            members, resp := Client.GetChannelMembers(th.BasicChannel.Id, 0, 60, "")

    post:
      tags:
        - channels
      summary: Add user to channel
      description: Add a user to a channel by creating a channel member object.
      parameters:
        - name: channel_id
          in: path
          description: The channel ID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - user_id
            properties:
              user_id:
                type: string
                description: The ID of user to add into the channel
              post_root_id:
                type: string
                description: The ID of root post where link to add channel member originates
      responses:
        '201':
          description: Channel member creation successful
          schema:
            $ref: '#/definitions/ChannelMember'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // AddChannelMember
            cm, resp := Client.AddChannelMember(<CHANNEL ID>, <ID OF USER TO ADD>)

            // AddChannelMemberWithRootId
            cm, resp := Client.AddChannelMemberWithRootId(<CHANNEL ID>, <ID OF USER TO ADD>, <POST ROOT ID>)

  '/channels/{channel_id}/members/ids':
    post:
      tags:
        - channels
      summary: Get channel members by ids
      description: |
        Get a list of channel members based on the provided user ids.
        ##### Permissions
        Must have the `read_channel` permission.
      parameters:
        - name: channel_id
          in: path
          description: Channel GUID
          required: true
          type: string
        - in: body
          name: user_ids
          description: List of user ids
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Channel member list retrieval successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ChannelMember'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            usersIds := []string{<Id of User1>, <Id of User2>, ...}

            // GetChannelMembersByIds
            cm, resp := Client.GetChannelMembersByIds(<CHANNELID>, usersIds)

  '/channels/{channel_id}/members/{user_id}':
    get:
      tags:
        - channels
      summary: Get channel member
      description: |
        Get a channel member.
        ##### Permissions
        `read_channel` permission for the channel.
      parameters:
        - name: channel_id
          in: path
          description: Channel GUID
          required: true
          type: string
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
      responses:
        '200':
          description: Channel member retrieval successful
          schema:
            $ref: '#/definitions/ChannelMember'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // GetChannelMember
            member, resp := Client.GetChannelMember(<CHANNELID>, <USERID>, "")

    delete:
      tags:
        - channels
      summary: Remove user from channel
      description: |
        Delete a channel member, effectively removing them from a channel.
        ##### Permissions
        `manage_public_channel_members` permission if the channel is public.
        `manage_private_channel_members` permission if the channel is private.
      parameters:
        - name: channel_id
          in: path
          description: Channel GUID
          required: true
          type: string
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
      responses:
        '200':
          description: Channel member deletion successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // RemoveUserFromChannel
            pass, resp := Client.RemoveUserFromChannel(<CHANNELID>, <USERID>)

  '/channels/{channel_id}/members/{user_id}/roles':
    put:
      tags:
        - channels
      summary: Update channel roles
      description: |
        Update a user's roles for a channel.
        ##### Permissions
        Must have `manage_channel_roles` permission for the channel.
      parameters:
        - name: channel_id
          in: path
          description: Channel GUID
          required: true
          type: string
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
        - in: body
          name: roles
          description: Space-delimited channel roles to assign to the user
          required: true
          schema:
            type: object
            required:
              - roles
            properties:
              roles:
                type: string
      responses:
        '200':
          description: Channel roles update successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // UpdateChannelRoles
            pass, resp := Client.UpdateChannelRoles(<CHANNELID>, <USERIDTOPROMOTE>, "channel_admin channel_user")

  '/channels/{channel_id}/members/{user_id}/notify_props':
    put:
      tags:
        - channels
      summary: Update channel notifications
      description: |
        Update a user's notification properties for a channel. Only the provided fields are updated.
        ##### Permissions
        Must be logged in as the user or have `edit_other_users` permission.
      parameters:
        - name: channel_id
          in: path
          description: Channel GUID
          required: true
          type: string
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
        - in: body
          name: notify_props
          required: true
          schema:
            $ref: '#/definitions/ChannelNotifyProps'
      responses:
        '200':
          description: Channel notification properties update successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            props := map[string]string{}
            props[model.DESKTOP_NOTIFY_PROP] = model.CHANNEL_NOTIFY_MENTION
            props[model.MARK_UNREAD_NOTIFY_PROP] = model.CHANNEL_MARK_UNREAD_MENTION

            // UpdateChannelNotifyProps
            pass, resp := Client.UpdateChannelNotifyProps(<CHANNELID>, <USERID>, props)

  '/channels/members/{user_id}/view':
    post:
      tags:
        - channels
      summary: View channel
      description: |
        Perform all the actions involved in viewing a channel. This includes marking channels as read, clearing push notifications, and updating the active channel.
        ##### Permissions
        Must be logged in as user or have `edit_other_users` permission.

        __Response only includes `last_viewed_at_times` in Mattermost server 4.3 and newer.__
      parameters:
        - in: path
          name: user_id
          description: User ID to perform the view action for
          required: true
          type: string
        - in: body
          name: body
          description: Paremeters affecting how and which channels to view
          required: true
          schema:
            type: object
            required:
              - channel_id
            properties:
              channel_id:
                type: string
                description: The channel ID that is being viewed. Use a blank string to indicate that all channels have lost focus.
              prev_channel_id:
                type: string
                description: The channel ID of the previous channel, used when switching channels. Providing this ID will cause push notifications to clear on the channel being switched to.
      responses:
        '200':
          description: Channel view successful
          schema:
            type: object
            properties:
              status:
                type: string
                description: Value should be "OK" if successful
              last_viewed_at_times:
                type: object
                description: A JSON object mapping channel IDs to the channel view times
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            view := &model.ChannelView{
              ChannelId: <CHANNELID>,
            }
            // ViewChannel
            pass, resp := Client.ViewChannel(<USERID>, view)

  '/users/{user_id}/teams/{team_id}/channels/members':
    get:
      tags:
        - channels
      summary: Get channel members for user
      description: |
        Get all channel members on a team for a user.
        ##### Permissions
        Logged in as the user and `view_team` permission for the team. Having `manage_system` permission voids the previous requirements.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
        - name: team_id
          in: path
          description: Team GUID
          required: true
          type: string
      responses:
        '200':
          description: Channel members retrieval successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ChannelMember'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // GetChannelMembersForUser
            members, resp := Client.GetChannelMembersForUser(<USERID>, <TEAMID>, "")

  '/users/{user_id}/teams/{team_id}/channels':
    get:
      tags:
        - channels
      summary: Get channels for user
      description: |
        Get all the channels on a team for a user.
        ##### Permissions
        Logged in as the user, or have `edit_other_users` permission, and `view_team` permission for the team.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
        - name: team_id
          in: path
          description: Team GUID
          required: true
          type: string
      responses:
        '200':
          description: Channels retrieval successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Channel'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // GetChannelsForTeamForUser
            channels, resp := Client.GetChannelsForTeamForUser(<TEAMID>, <USERID>, "")

  '/users/{user_id}/channels/{channel_id}/unread':
    get:
      tags:
        - channels
      summary: Get unread messages
      description: |
        Get the total unread messages and mentions for a channel for a user.
        ##### Permissions
        Must be logged in as user and have the `read_channel` permission, or have `edit_other_usrs` permission.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
        - name: channel_id
          in: path
          description: Channel GUID
          required: true
          type: string
      responses:
        '200':
          description: Channel unreads retrieval successful
          schema:
            $ref: '#/definitions/ChannelUnread'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"
            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // GetChannelUnread
            channelUnread, resp := Client.GetChannelUnread(<CHANNELID>, <USERID>)
