  /posts:
    post:
      tags:
        - posts
      summary: Create a post
      description: >
        Create a new post in a channel. To create the post as a comment on
        another post, provide `root_id`.

        ##### Permissions

        Must have `create_post` permission for the channel the post is being created in.
      parameters:
        - name: set_online
          in: query
          description: Whether to set the user status as online or not.
          required: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - channel_id
                - message
              properties:
                channel_id:
                  type: string
                  description: The channel ID to post in
                message:
                  type: string
                  description: The message contents, can be formatted with Markdown
                root_id:
                  type: string
                  description: The post ID to comment on
                file_ids:
                  type: array
                  description: A list of file IDs to associate with the post. Note that
                    posts are limited to 5 files maximum. Please use additional
                    posts for more files.
                  items:
                    type: string
                props:
                  description: A general JSON property bag to attach to the post
                  type: object
        description: Post object to create
        required: true
      responses:
        "201":
          description: Post creation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /posts/ephemeral:
    post:
      tags:
        - posts
      summary: Create a ephemeral post
      description: >
        Create a new ephemeral post in a channel.

        ##### Permissions

        Must have `create_post_ephemeral` permission (currently only given to system admin)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - post
              properties:
                user_id:
                  type: string
                  description: The target user id for the ephemeral post
                post:
                  type: object
                  required:
                    - channel_id
                    - message
                  description: Post object to create
                  properties:
                    channel_id:
                      type: string
                      description: The channel ID to post in
                    message:
                      type: string
                      description: The message contents, can be formatted with Markdown
        description: Ephemeral Post object to send
        required: true
      responses:
        "201":
          description: Post creation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
      x-code-samples:
        - lang: Go
          source: |
            client := model.NewAPIv4Client("https://your-mattermost-url.com")
            client.Login("email@domain.com", "Password1")

            ephemeralPost := &model.PostEphemeral{
              UserID: "<ID OF THE USER THAT WOULD RECEIVE THE POST>",
              Post: &model.Post{
                ChannelId: "<ID OF CHANNEL>",
                Message:   "<YOUR MESSAGE>",
              },
            }

            createdPost, response := client.CreatePostEphemeral(ephemeralPost)
  "/posts/{post_id}":
    get:
      tags:
        - posts
      summary: Get a post
      description: >
        Get a single post.

        ##### Permissions

        Must have `read_channel` permission for the channel the post is in or if the channel is public, have the `read_public_channels` permission for the team.
      parameters:
        - name: post_id
          in: path
          description: ID of the post to get
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Post retrieval successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    delete:
      tags:
        - posts
      summary: Delete a post
      description: >
        Soft deletes a post, by marking the post as deleted in the database.
        Soft deleted posts will not be returned in post queries.

        ##### Permissions

        Must be logged in as the user or have `delete_others_posts` permission.
      parameters:
        - name: post_id
          in: path
          description: ID of the post to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Post deletion successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOK"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    put:
      tags:
        - posts
      summary: Update a post
      description: >
        Update a post. Only the fields listed below are updatable, omitted
        fields will be treated as blank.

        ##### Permissions

        Must have `edit_post` permission for the channel the post is in.
      parameters:
        - name: post_id
          in: path
          description: ID of the post to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  description: ID of the post to update
                  type: string
                is_pinned:
                  description: Set to `true` to pin the post to the channel it is in
                  type: boolean
                message:
                  description: The message text of the post
                  type: string
                has_reactions:
                  description: Set to `true` if the post has reactions to it
                  type: boolean
                props:
                  description: A general JSON property bag to attach to the post
                  type: string
        description: Post object that is to be updated
        required: true
      responses:
        "200":
          description: Post update successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/user/{user_id}/posts/{post_id}/set_unread":
    post:
      tags:
        - posts
      summary: Mark as unread from a post.
      description: >
        Mark a channel as being unread from a given post.

        ##### Permissions

        Must have `read_channel` permission for the channel the post is in or if the channel is public, have the `read_public_channels` permission for the team.

        Must have `edit_other_users` permission if the user is not the one marking the post for himself.


        __Minimum server version__: 5.18
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          schema:
            type: string
        - name: post_id
          in: path
          description: Post GUID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Post marked as unread successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelUnreadAt"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
  "/posts/{post_id}/patch":
    put:
      tags:
        - posts
      summary: Patch a post
      description: >
        Partially update a post by providing only the fields you want to update.
        Omitted fields will not be updated. The fields that can be updated are
        defined in the request body, all other provided fields will be ignored.

        ##### Permissions

        Must have the `edit_post` permission.
      parameters:
        - name: post_id
          in: path
          description: Post GUID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                is_pinned:
                  description: Set to `true` to pin the post to the channel it is in
                  type: boolean
                message:
                  description: The message text of the post
                  type: string
                file_ids:
                  description: The list of files attached to this post
                  type: array
                  items:
                    type: string
                has_reactions:
                  description: Set to `true` if the post has reactions to it
                  type: boolean
                props:
                  description: A general JSON property bag to attach to the post
                  type: string
        description: Post object that is to be updated
        required: true
      responses:
        "200":
          description: Post patch successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/posts/{post_id}/thread":
    get:
      tags:
        - posts
      summary: Get a thread
      description: >
        Get a post and the rest of the posts in the same thread.

        ##### Permissions

        Must have `read_channel` permission for the channel the post is in or if the channel is public, have the `read_public_channels` permission for the team.
      parameters:
        - name: post_id
          in: path
          description: ID of a post in the thread
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Post list retrieval successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/users/{user_id}/posts/flagged":
    get:
      tags:
        - posts
      summary: Get a list of flagged posts
      description: >
        Get a page of flagged posts of a user provided user id string. Selects
        from a channel, team or all flagged posts by a user.

        ##### Permissions

        Must be user or have `manage_system` permission.
      parameters:
        - name: user_id
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
        - name: team_id
          in: query
          description: Team ID
          schema:
            type: string
        - name: channel_id
          in: query
          description: Channel ID
          schema:
            type: string
        - name: page
          in: query
          description: The page to select
          schema:
            type: integer
            default: 0
        - name: per_page
          in: query
          description: The number of posts per page
          schema:
            type: integer
            default: 60
      responses:
        "200":
          description: Post list retrieval successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PostList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/posts/{post_id}/files/info":
    get:
      tags:
        - posts
      summary: Get file info for post
      description: >
        Gets a list of file information objects for the files attached to a
        post.

        ##### Permissions

        Must have `read_channel` permission for the channel the post is in.
      parameters:
        - name: post_id
          in: path
          description: ID of the post
          required: true
          schema:
            type: string
      responses:
        "200":
          description: File info retrieval successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FileInfo"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/channels/{channel_id}/posts":
    get:
      tags:
        - posts
      summary: Get posts for a channel
      description: >
        Get a page of posts in a channel. Use the query parameters to modify the
        behaviour of this endpoint. The parameters `since`, `before` and `after`
        must not be used together.

        ##### Permissions

        Must have `read_channel` permission for the channel.
      parameters:
        - name: channel_id
          in: path
          description: The channel ID to get the posts for
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: The page to select
          schema:
            type: integer
            default: 0
        - name: per_page
          in: query
          description: The number of posts per page
          schema:
            type: integer
            default: 60
        - name: since
          in: query
          description: Provide a non-zero value in Unix time milliseconds to select posts
            created after that time
          schema:
            type: integer
        - name: before
          in: query
          description: A post id to select the posts that came before this one
          schema:
            type: string
        - name: after
          in: query
          description: A post id to select the posts that came after this one
          schema:
            type: string
      responses:
        "200":
          description: Post list retrieval successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/users/{user_id}/channels/{channel_id}/posts/unread":
    get:
      tags:
        - posts
      summary: Get posts around last unread
      description: >
        Get the oldest unread post in the channel for the given user as well as
        the posts around it.

        ##### Permissions

        Must be logged in as the user or have `edit_other_users` permission, and must have `read_channel` permission for the channel.

        __Minimum server version__: 5.14
      parameters:
        - name: user_id
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
        - name: channel_id
          in: path
          description: The channel ID to get the posts for
          required: true
          schema:
            type: string
        - name: limit_before
          in: query
          description: Number of posts before the last unread posts. Maximum is 200 posts
            if limit is set greater than that.
          schema:
            type: integer
            default: 60
        - name: limit_after
          in: query
          description: Number of posts after and including the last unread post. Maximum is
            200 posts if limit is set greater than that.
          schema:
            type: integer
            default: 60
      responses:
        "200":
          description: Post list retrieval successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/teams/{team_id}/posts/search":
    post:
      tags:
        - posts
      summary: Search for team posts
      description: |
        Search posts in the team and from the provided terms string.
        ##### Permissions
        Must be authenticated and have the `view_team` permission.
      parameters:
        - name: team_id
          in: path
          description: Team GUID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - terms
                - is_or_search
              properties:
                terms:
                  type: string
                  description: The search terms as inputed by the user. To search for posts
                    from a user include `from:someusername`, using a user's
                    username. To search in a specific channel include
                    `in:somechannel`, using the channel name (not the display
                    name).
                is_or_search:
                  type: boolean
                  description: Set to true if an Or search should be performed vs an And
                    search.
                time_zone_offset:
                  type: integer
                  default: 0
                  description: Offset from UTC of user timezone for date searches.
                include_deleted_channels:
                  type: boolean
                  description: Set to true if deleted channels should be included in the
                    search. (archived channels)
                page:
                  type: integer
                  default: 0
                  description: The page to select. (Only works with Elasticsearch)
                per_page:
                  type: integer
                  default: 60
                  description: The number of posts per page. (Only works with Elasticsearch)
        description: The search terms and logic to use in the search.
        required: true
      responses:
        "200":
          description: Post list retrieval successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostListWithSearchMatches"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/posts/{post_id}/pin":
    post:
      tags:
        - posts
      summary: Pin a post to the channel
      description: >
        Pin a post to a channel it is in based from the provided post id string.

        ##### Permissions

        Must be authenticated and have the `read_channel` permission to the channel the post is in.
      parameters:
        - name: post_id
          in: path
          description: Post GUID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Pinned post successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOK"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/posts/{post_id}/unpin":
    post:
      tags:
        - posts
      summary: Unpin a post to the channel
      description: >
        Unpin a post to a channel it is in based from the provided post id
        string.

        ##### Permissions

        Must be authenticated and have the `read_channel` permission to the channel the post is in.
      parameters:
        - name: post_id
          in: path
          description: Post GUID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Unpinned post successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOK"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/posts/{post_id}/actions/{action_id}":
    post:
      tags:
        - posts
      summary: Perform a post action
      description: >
        Perform a post action, which allows users to interact with integrations
        through posts.

        ##### Permissions

        Must be authenticated and have the `read_channel` permission to the channel the post is in.
      parameters:
        - name: post_id
          in: path
          description: Post GUID
          required: true
          schema:
            type: string
        - name: action_id
          in: path
          description: Action GUID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Post action successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOK"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
