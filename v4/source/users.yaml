  /users:
    post:
      tags:
        - users
      summary: Create a user
      description: |
        Create a new user on the system.
        ##### Permissions
        No permission required but user creation can be controlled by server configuration.
      parameters:
        - name: t
          in: query
          description: Token id from an email invitation
          required: false
          type: string
        - name: iid
          in: query
          description: Token id from an invitation link
          required: false
          type: string
        - in: body
          name: body
          description: User object to be created
          required: true
          schema:
            type: object
            required:
              - email
              - username
              - password
            properties:
              email:
                type: string
              username:
                type: string
              first_name:
                 type: string
              last_name:
                type: string
              nickname:
                type: string
              password:
                type: string
              locale:
                type: string
              props:
                type: object
              notify_props:
                $ref: '#/definitions/UserNotifyProps'
      responses:
        '201':
          description: User creation successful
          schema:
            $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '403':
          $ref: '#/responses/Forbidden'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"

            Client := model.NewAPIv4Client("https://your-mattermost-url.com")

            user := &model.User{
                Username: "username",
                Email: "email@domain.com",
                Password: "Password1",
            }

            createdUser, response := Client.CreateUser(user)

    get:
      tags:
        - users
      summary: Get users
      description: |
        Get a page of a list of users. Based on query string parameters, select users from a team, channel, or select users not in a specific channel.

        Since server version 4.0, some basic sorting is available using the `sort` query parameter. Sorting is currently only supported when selecting users on a team.
        ##### Permissions
        Requires an active session and (if specified) membership to the channel or team being selected from.
      parameters:
        - name: page
          in: query
          description: The page to select.
          default: "0"
          type: string
        - name: per_page
          in: query
          description: The number of users per page. There is a maximum limit of 200 users per page.
          default: "60"
          type: string
        - name: in_team
          in: query
          description: The ID of the team to get users for.
          type: string
        - name: not_in_team
          in: query
          description: The ID of the team to exclude users for. Must not be used with "in_team" query parameter.
          type: string
        - name: in_channel
          in: query
          description: The ID of the channel to get users for.
          type: string
        - name: not_in_channel
          in: query
          description: The ID of the channel to exclude users for. Must be used with "in_channel" query parameter.
          type: string
        - name: without_team
          in: query
          description: Whether or not to list users that are not on any team. This option takes precendence over `in_team`, `in_channel`, and `not_in_channel`.
          type: boolean
        - name: sort
          in: query
          description: |
            Sort is only available in conjunction with certain options below. The paging parameter is also always available.

            ##### `in_team`
            Can be "", "last_activity_at" or "create_at".
            When left blank, sorting is done by username.
            __Minimum server version__: 4.0
            ##### `in_channel`
            Can be "", "status".
            When left blank, sorting is done by username. `status` will sort by User's current status (Online, Away, DND, Offline), then by Username.
            __Minimum server version__: 4.7
          type: string
      responses:
        '200':
          description: User page retrieval successful
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
      x-code-samples:
        - lang: 'Go'
          source: |
            import "github.com/mattermost/mattermost-server/model"

            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")


            // page, perPage, etag
            users := Client.GetUsers(0, 60, "")
            users = Client.GetUsersInChannel("channelid", 0, 60, "")
            users = Client.GetUsersNotInChannel("teamid", "channelid", 0, 60, "")
            users = Client.GetUsersInTeam("teamid", 0, 60, "")
            users = Client.GetUsersNotInTeam("teamid", 0, 60, "")
            users = Client.GetUsersWithoutTeam(0, 60, "")

  /users/ids:
    post:
      tags:
        - users
      summary: Get users by ids
      description: |
        Get a list of users based on a provided list of user ids.
        ##### Permissions
        Requires an active session but no other permissions.
      parameters:
        - in: body
          name: body
          description: List of user ids
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: User list retrieval successful
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'

  /users/usernames:
    post:
      tags:
        - users
      summary: Get users by usernames
      description: |
        Get a list of users based on a provided list of usernames.
        ##### Permissions
        Requires an active session but no other permissions.
      parameters:
        - in: body
          name: body
          description: List of usernames
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: User list retrieval successful
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'

  /users/search:
    post:
      tags:
        - users
      summary: Search users
      description: |
        Get a list of users based on search criteria provided in the request body. Searches are typically done against username, full name, nickname and email unless otherwise configured by the server.
        ##### Permissions
        Requires an active session and `read_channel` and/or `view_team` permissions for any channels or teams specified in the request body.
      parameters:
        - in: body
          name: body
          description: Search criteria
          required: true
          schema:
            type: object
            required:
              - term
            properties:
              term:
                description: The term to match against username, full name, nickname and email
                type: string
              team_id:
                description: If provided, only search users on this team
                type: string
              not_in_team_id:
                description: If provided, only search users not on this team
                type: string
              in_channel_id:
                description: If provided, only search users in this channel
                type: string
              not_in_channel_id:
                description: If provided, only search users not in this channel. Must specifiy `team_id` when using this option
                type: string
              allow_inactive:
                description: When `true`, include deactivated users in the results
                type: boolean
              without_team:
                type: boolean
                description: Set this to `true` if you would like to search for users that are not on a team. This option takes precendence over `team_id`, `in_channel_id`, and `not_in_channel_id`.
      responses:
        '200':
          description: User list retrieval successful
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/autocomplete:
    get:
      tags:
        - users
      summary: Autocomplete users
      description: |
        Get a list of users for the purpose of autocompleting based on the provided search term. Specify a combination of `team_id` and `channel_id` to filter results further.
        ##### Permissions
        Requires an active session and `view_team` and `read_channel` on any teams or channels used to filter the results further.
      parameters:
        - name: team_id
          in: query
          description: Team ID
          type: string
        - name: channel_id
          in: query
          description: Channel ID
          type: string
        - name: name
          in: query
          description: Username, nickname first name or last name
          required: true
          type: string
      responses:
        '200':
          description: User autocomplete successful
          schema:
            $ref: '#/definitions/UserAutocomplete'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/{user_id}:
    get:
      tags:
        - users
      summary: Get a user
      description: |
        Get a user a object. Sensitive information will be sanitized out.
        ##### Permissions
        Requires an active session but no other permissions.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
      responses:
        '200':
          description: User retrieval successful
          schema:
            $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '404':
          $ref: '#/responses/NotFound'

    put:
      tags:
        - users
      summary: Update a user
      description: |
        Update a user by providing the user object. The fields that can be updated are defined in the request body, all other provided fields will be ignored.
        ##### Permissions
        Must be logged in as the user being updated or have the `edit_other_users` permission.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
        - in: body
          name: body
          description: User object that is to be updated
          required: true
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
              email:
                type: string
              username:
                type: string
              first_name:
                 type: string
              last_name:
                type: string
              nickname:
                type: string
              locale:
                type: string
              position:
                type: string
              props:
                type: object
              notify_props:
                $ref: '#/definitions/UserNotifyProps'
      responses:
        '200':
          description: User update successful
          schema:
            $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

    delete:
      tags:
        - users
      summary: Deactivate a user account.
      description: |
        Deactivates the user by archiving its user object.
        ##### Permissions
        Must be logged in as the user being deactivated or have the `edit_other_users` permission.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
      responses:
        '200':
          description: User deactivation successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /users/{user_id}/patch:
    put:
      tags:
        - users
      summary: Patch a user
      description: |
        Partially update a user by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.
        ##### Permissions
        Must be logged in as the user being updated or have the `edit_other_users` permission.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
        - in: body
          name: body
          description: User object that is to be updated
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              username:
                type: string
              first_name:
                 type: string
              last_name:
                type: string
              nickname:
                type: string
              locale:
                type: string
              position:
                type: string
              props:
                type: object
              notify_props:
                $ref: '#/definitions/UserNotifyProps'
      responses:
        '200':
          description: User patch successful
          schema:
            $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/{user_id}/roles:
    put:
      tags:
        - users
      summary: Update a user's roles
      description: |
        Update a user's system-level roles. Valid user roles are "system_user", "system_admin" or both of them. Overwrites any previously assigned system-level roles.
        ##### Permissions
        Must have the `manage_roles` permission.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
        - in: body
          name: roles
          description: Space-delimited system roles to assign to the user
          required: true
          schema:
            type: object
            required:
              - roles
            properties:
              roles:
                type: string
      responses:
        '200':
          description: User roles update successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/{user_id}/active:
    put:
      tags:
        - users
      summary: Update user active status
      description: |
        Update user active or inactive status.

        __Since server version 4.6, users using a SSO provider to login can be activated or deactivated with this endpoint. However, if their activation status in Mattermost does not reflect their status in the SSO provider, the next synchronization or login by that user will reset the activation status to that of their account in the SSO provider. Server versions 4.5 and before do not allow activation or deactivation of SSO users from this endpoint.__
        ##### Permissions
        User can deactivate themself.
        User with `manage_system` permission can activate or deactivate a user.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
        - in: body
          name: body
          description: Use `true` to set the user active, `false` for inactive
          required: true
          schema:
            type: object
            required:
              - active
            properties:
              active:
                type: boolean
      responses:
        '200':
          description: User active status update successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/{user_id}/image:
    get:
      tags:
        - users
      summary: Get user's profile image
      description: |
        Get a user's profile image based on user_id string parameter.
        ##### Permissions
        Must be logged in.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
      responses:
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
        '501':
          $ref: '#/responses/NotImplemented'
    post:
      tags:
        - users
      summary: Set user's profile image
      description: |
        Set a user's profile image based on user_id string parameter.
        ##### Permissions
        Must be logged in as the user being updated or have the `edit_other_users` permission.
      consumes: ["multipart/form-data"]
      parameters:
        - name: image
          in: formData
          description: The image to be uploaded
          required: true
          type: file
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
      responses:
        '200':
          description: Profile image set successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
        '501':
          $ref: '#/responses/NotImplemented'

  /users/username/{username}:
    get:
      tags:
        - users
      summary: Get a user by username
      description: |
        Get a user object by providing a username. Sensitive information will be sanitized out.
        ##### Permissions
        Requires an active session but no other permissions.
      parameters:
        - name: username
          in: path
          description: Username
          required: true
          type: string
      responses:
        '200':
          description: User retrieval successful
          schema:
            $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '404':
          $ref: '#/responses/NotFound'

  /users/password/reset:
    post:
      tags:
        - users
      summary: Reset password
      description: |
        Update the password for a user using a one-use, timed recovery code tied to the user's account. Only works for non-SSO users.
        ##### Permissions
        No permissions required.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - code
              - new_password
            properties:
              code:
                description: The recovery code
                type: string
              new_password:
                description: The new password for the user
                type: string
      responses:
        '200':
          description: User password update successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/{user_id}/mfa:
    put:
      tags:
        - users
      summary: Update a user's MFA
      description: |
        Activates multi-factor authentication for the user if `activate` is true and a valid `code` is provided. If activate is false, then `code` is not required and multi-factor authentication is disabled for the user.
        ##### Permissions
        Must be logged in as the user being updated or have the `edit_other_users` permission.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - activate
            properties:
              activate:
                description: Use `true` to activate, `false` to deactivate
                type: boolean
              code:
                description: The code produced by your MFA client. Required if `activate` is true
                type: string
      responses:
        '200':
          description: User MFA update successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '501':
          $ref: '#/responses/NotImplemented'

  /users/{user_id}/mfa/generate:
    post:
      tags:
        - users
      summary: Generate MFA secret
      description: |
        Generates an multi-factor authentication secret for a user and returns it as a string and as base64 encoded QR code image.
        ##### Permissions
        Must be logged in as the user or have the `edit_other_users` permission.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
      responses:
        '200':
          description: MFA secret generation successful
          schema:
            type: object
            properties:
              secret:
                description: The MFA secret as a string
                type: string
              qr_code:
                description: A base64 encoded QR code image
                type: string
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
        '501':
          $ref: '#/responses/NotImplemented'

  /users/mfa:
    post:
      tags:
        - users
      summary: Check MFA
      description: |
        Check if a user has multi-factor authentication active on their account by providing a login id. Used to check whether an MFA code needs to be provided when logging in.
        ##### Permissions
        No permission required.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - login_id
            properties:
              login_id:
                description: The email or username used to login
                type: string
      responses:
        '200':
          description: MFA check successful
          schema:
            type: object
            properties:
              mfa_required:
                description: Value will `true` if MFA is active, `false` otherwise
                type: boolean
        '400':
          $ref: '#/responses/BadRequest'

  /users/{user_id}/password:
    put:
      tags:
        - users
      summary: Update a user's password
      description: |
        Update a user's password. New password must meet password policy set by server configuration. Current password is required if you're updating your own password.
        ##### Permissions
        Must be logged in as the user the password is being changed for or have `manage_system` permission.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - new_password
            properties:
              current_password:
                description: The current password for the user
                type: string
              new_password:
                description: The new password for the user
                type: string
      responses:
        '200':
          description: User password update successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/password/reset/send:
    post:
      tags:
        - users
      summary: Send password reset email
      description: |
        Send an email containing a link for resetting the user's password. The link will contain a one-use, timed recovery code tied to the user's account. Only works for non-SSO users.
        ##### Permissions
        No permissions required.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
            properties:
              email:
                description: The email of the user
                type: string
      responses:
        '200':
          description: Email sent if account exists
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/email/{email}:
    get:
      tags:
        - users
      summary: Get a user by email
      description: |
        Get a user object by providing a user email. Sensitive information will be sanitized out.
        ##### Permissions
        Requires an active session but no other permissions.
      parameters:
        - name: email
          in: path
          description: User Email
          required: true
          type: string
      responses:
        '200':
          description: User retrieval successful
          schema:
            $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '404':
          $ref: '#/responses/NotFound'

  /users/{user_id}/sessions:
    get:
      tags:
        - users
      summary: Get user's sessions
      description: |
        Get a list of sessions by providing the user GUID. Sensitive information will be sanitized out.
        ##### Permissions
        Must be logged in as the user being updated or have the `edit_other_users` permission.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
      responses:
        '200':
          description: User session retrieval successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Session'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/{user_id}/sessions/revoke:
    post:
      tags:
        - users
      summary: Revoke a user session
      description: |
        Revokes a user session from the provided user id and session id strings.
        ##### Permissions
        Must be logged in as the user being updated or have the `edit_other_users` permission.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - session_id
            properties:
              session_id:
                description: The session GUID to revoke.
                type: string
      responses:
        '200':
          description: User session revoked successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/{user_id}/sessions/revoke/all:
      post:
        tags:
          - users
        summary: Revoke all active sessions for a user
        description: |
          Revokes all user sessions from the provided user id and session id strings.
          ##### Permissions
          Must be logged in as the user being updated or have the `edit_other_users` permission.
          __Minimum server version__: 4.4
        parameters:
          - name: user_id
            in: path
            description: User GUID
            required: true
            type: string
        responses:
          '200':
            description: User sessions revoked successfully
            schema:
              $ref: '#/definitions/StatusOK'
          '400':
            $ref: '#/responses/BadRequest'
          '401':
            $ref: '#/responses/Unauthorized'
          '403':
            $ref: '#/responses/Forbidden'

  /users/sessions/device:
    put:
      tags:
        - users
      summary: Attach mobile device
      description: |
        Attach a mobile device id to the currently logged in session. This will enable push notiofications for a user, if configured by the server.
        ##### Permissions
        Must be authenticated.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - device_id
            properties:
              device_id:
                description: Mobile device id. For Android prefix the id with `android:` and Apple with `apple:`
                type: string
      responses:
        '200':
          description: Device id attach successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'

  /users/{user_id}/audits:
    get:
      tags:
        - users
      summary: Get user's audits
      description: |
        Get a list of audit by providing the user GUID.
        ##### Permissions
        Must be logged in as the user or have the `edit_other_users` permission.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
      responses:
        '200':
          description: User audits retrieval successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Audit'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/email/verify:
    post:
      tags:
        - users
      summary: Verify user email
      description: |
        Verify the email used by a user to sign-up their account with.
        ##### Permissions
        No permissions required.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - token
            properties:
              token:
                description: The token given to validate the email
                type: string
      responses:
        '200':
          description: User email verification successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'

  /users/email/verify/send:
    post:
      tags:
        - users
      summary: Send verification email
      description: |
        Send an email with a verification link to a user that has an email matching the one in the request body. This endpoint will return success even if the email does not match any users on the system.
        ##### Permissions
        No permissions required.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
            properties:
              email:
                description: Email of a user
                type: string
      responses:
        '200':
          description: Email send successful if email exists
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'

  /users/login/switch:
    post:
      tags:
        - users
      summary: Switch login method
      description: |
        Switch a user's login method from using email to OAuth2/SAML/LDAP or back to email. When switching to OAuth2/SAML, account switching is not complete until the user follows the returned link and completes any steps on the OAuth2/SAML service provider.

        To switch from email to OAuth2/SAML, specify `current_service`, `new_service`, `email` and `password`.

        To switch from OAuth2/SAML to email, specify `current_service`, `new_service`, `email` and `new_password`.

        To switch from email to LDAP/AD, specify `current_service`, `new_service`, `email`, `password`, `ldap_ip` and `new_password` (this is the user's LDAP password).

        To switch from LDAP/AD to email, specify `current_service`, `new_service`, `ldap_ip`, `password` (this is the user's LDAP password), `email`  and `new_password`.

        Additionally, specify `mfa_code` when trying to switch an account on LDAP/AD or email that has MFA activated.

        ##### Permissions
        No current authentication required except when switching from OAuth2/SAML to email.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - current_service
              - new_service
            properties:
              current_service:
                description: The service the user currently uses to login
                type: string
              new_service:
                description: The service the user will use to login
                type: string
              email:
                description: The email of the user
                type: string
              password:
                description: The password used with the current service
                type: string
              mfa_code:
                description: The MFA code of the current service
                type: string
              ldap_id:
                description: The LDAP/AD id of the user
                type: string
      responses:
        '200':
          description: Login method switch or request successful
          schema:
            type: object
            properties:
              follow_link:
                description: The link for the user to follow to login or to complete the account switching when the current service is OAuth2/SAML
                type: string
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
        '501':
          $ref: '#/responses/NotImplemented'

  /users/{user_id}/tokens:
    post:
      tags:
        - users
      summary: Create a user access token
      description: |
        Generate a user access token that can be used to authenticate with the Mattermost REST API.

        __Minimum server version__: 4.1

        ##### Permissions
        Must have `create_user_access_token` permission. For non-self requests, must also have the `edit_other_users` permission.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
        - in: body
          name: token
          required: true
          schema:
            type: object
            required:
              - description
            properties:
              description:
                description: A description of the token usage
                type: string
      responses:
        '201':
          description: User access token creation successful
          schema:
            $ref: '#/definitions/UserAccessToken'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

    get:
      tags:
        - users
      summary: Get user access tokens
      description: |
        Get a list of user access tokens for a user. Does not include the actual authentication tokens. Use query paremeters for paging.

        __Minimum server version__: 4.1

        ##### Permissions
        Must have `read_user_access_token` permission. For non-self requests, must also have the `edit_other_users` permission.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
        - name: page
          in: query
          description: The page to select.
          default: "0"
          type: string
        - name: per_page
          in: query
          description: The number of tokens per page.
          default: "60"
          type: string
      responses:
        '200':
          description: User access tokens retrieval successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UserAccessTokenSanitized'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/tokens:
    get:
      tags:
        - users
      summary: Get user access tokens
      description: |
        Get a page of user access tokens for users on the system. Does not include the actual authentication tokens. Use query parameters for paging.

        __Minimum server version__: 4.7

        ##### Permissions
        Must have `manage_system` permission.
      parameters:
        - name: page
          in: query
          description: The page to select.
          default: "0"
          type: string
        - name: per_page
          in: query
          description: The number of tokens per page.
          default: "60"
          type: string
      responses:
        '200':
          description: User access tokens retrieval successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UserAccessTokenSanitized'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/tokens/revoke:
    post:
      tags:
        - users
      summary: Revoke a user access token
      description: |
        Revoke a user access token and delete any sessions using the token.

        __Minimum server version__: 4.1

        ##### Permissions
        Must have `revoke_user_access_token` permission. For non-self requests, must also have the `edit_other_users` permission.
      parameters:
        - in: body
          name: token
          required: true
          schema:
            type: object
            required:
              - token
            properties:
              token:
                description: The token to revoke
                type: string
      responses:
        '200':
          description: User access token revoke successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/tokens/{token_id}:
    get:
      tags:
        - users
      summary: Get a user access token
      description: |
        Get a user access token. Does not include the actual authentication token.

        __Minimum server version__: 4.1

        ##### Permissions
        Must have `read_user_access_token` permission. For non-self requests, must also have the `edit_other_users` permission.
      parameters:
        - name: token_id
          in: path
          description: User access token GUID
          required: true
          type: string
      responses:
        '200':
          description: User access token retrieval successful
          schema:
            $ref: '#/definitions/UserAccessTokenSanitized'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /users/tokens/disable:
    post:
      tags:
        - users
      summary: Disable personal access token
      description: |
        Disable a personal access token and delete any sessions using the token. The token can be re-enabled using `/users/tokens/enable`.

        __Minimum server version__: 4.4

        ##### Permissions
        Must have `revoke_user_access_token` permission. For non-self requests, must also have the `edit_other_users` permission.
      parameters:
        - in: body
          name: token
          required: true
          schema:
            type: object
            required:
              - token
            properties:
              token:
                description: The token to disable
                type: string
      responses:
        '200':
          description: Personal access token disable successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/tokens/enable:
    post:
      tags:
        - users
      summary: Enable personal access token
      description: |
        Re-enable a personal access token that has been disabled.

        __Minimum server version__: 4.4

        ##### Permissions
        Must have `create_user_access_token` permission. For non-self requests, must also have the `edit_other_users` permission.
      parameters:
        - in: body
          name: token
          required: true
          schema:
            type: object
            required:
              - token
            properties:
              token:
                description: The token to enable
                type: string
      responses:
        '200':
          description: Personal access token enable successful
          schema:
            $ref: '#/definitions/StatusOK'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /users/tokens/search:
    post:
      tags:
        - users
      summary: Search tokens
      description: |
        Get a list of tokens based on search criteria provided in the request body. Searches are done against the token id, user id and username.

        __Minimum server version__: 4.7

        ##### Permissions
        Must have `manage_system` permission.
      parameters:
        - in: body
          name: body
          description: Search criteria
          required: true
          schema:
            type: object
            required:
              - term
            properties:
              term:
                description: The search term to match against the token id, user id or username.
                type: string
      responses:
        '200':
          description: Personal access token search successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UserAccessTokenSanitized'
  /users/{user_id}/auth:
    put:
      tags:
        - users
      summary: Update a user's authentication method
      description: |
        Updates a user's authentication method. This can be used to change them to/from LDAP authentication for example.

        __Minimum server version__: 4.6
        ##### Permissions
        Must have the `edit_other_users` permission.
      parameters:
        - name: user_id
          in: path
          description: User GUID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UserAuthData'
      responses:
        '200':
          description: User auth update successful
          schema:
            $ref: '#/definitions/UserAuthData'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '501':
          $ref: '#/responses/NotImplemented'
