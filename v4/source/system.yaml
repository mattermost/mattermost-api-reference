  /system/ping:
    get:
      tags:
        - system
      summary: Check system health
      description: >
        Check if the server is up and healthy based on the configuration setting
        `GoRoutineHealthThreshold`. If `GoRoutineHealthThreshold` and the number
        of goroutines on the server exceeds that threshold the server is
        considered unhealthy. If `GoRoutineHealthThreshold` is not set or the
        number of goroutines is below the threshold the server is considered
        healthy.

        __Minimum server version__: 3.10

        ##### Permissions

        Must be logged in.
      responses:
        "200":
          description: Status of the system
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOK"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-code-samples:
        - lang: Go
          source: |
            import "github.com/mattermost/mattermost-server/model"

            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // GetPing
            status, resp := Client.GetPing()
  /database/recycle:
    post:
      tags:
        - system
      summary: Recycle database connections
      description: >
        Recycle database connections by closing and reconnecting all connections
        to master and read replica databases.

        ##### Permissions

        Must have `manage_system` permission.
      responses:
        "200":
          description: Database recycle successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOK"
        "403":
          $ref: "#/components/responses/Forbidden"
      x-code-samples:
        - lang: Go
          source: |
            import "github.com/mattermost/mattermost-server/model"

            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            ok, resp := Client.DatabaseRecycle()
  /email/test:
    post:
      tags:
        - system
      summary: Send a test email
      description: >
        Send a test email to make sure you have your email settings configured
        correctly. Optionally provide a configuration in the request body to
        test. If no valid configuration is present in the request body the
        current server configuration will be tested.

        ##### Permissions

        Must have `manage_system` permission.
      requestBody:
        description: Mattermost configuration
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Config"
      responses:
        "200":
          description: Email successful sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOK"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-code-samples:
        - lang: Go
          source: |
            import "github.com/mattermost/mattermost-server/model"

            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            config := model.Config{
              EmailSettings: model.EmailSettings{
                SMTPServer:    <SMTPServer>,
                SMTPPort:      <SMTPPort>,
                SMTPUsername:  <SMTPUsername>,
                SMTPPassword:  <SMTPPassword>,
              },
            }

            // TestEmail
            ok, resp := Client.TestEmail(&config)
  /site_url/test:
    post:
      tags:
        - system
      summary: Checks the validity of a Site URL
      description: >
        Sends a Ping request to the mattermost server using the specified Site
        URL.


        ##### Permissions

        Must have `manage_system` permission.


        __Minimum server version__: 5.16
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - site_url
              properties:
                site_url:
                  type: string
                  description: The Site URL to test
        required: true
      responses:
        "200":
          description: Site URL is valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOK"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-code-samples:
        - lang: Go
          source: |
            import "github.com/mattermost/mattermost-server/model"

            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            siteURL := "https://your-new-mattermost-url.com"

            // TestSiteURL
            ok, resp := Client.TestSiteURL(siteUrl)
  /file/s3_test:
    post:
      tags:
        - system
      summary: Test AWS S3 connection
      description: >
        Send a test to validate if can connect to AWS S3. Optionally provide a
        configuration in the request body to test. If no valid configuration is
        present in the request body the current server configuration will be
        tested.

        ##### Permissions

        Must have `manage_system` permission.

        __Minimum server version__: 4.8
      requestBody:
        description: Mattermost configuration
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Config"
      responses:
        "200":
          description: S3 Test successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOK"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-code-samples:
        - lang: Go
          source: |
            import "github.com/mattermost/mattermost-server/model"

            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            config := model.Config{
              FileSettings: model.FileSettings{
                DriverName:              model.NewString(model.IMAGE_DRIVER_S3),
                AmazonS3AccessKeyId:     <AmazonS3AccessKeyId>,
                AmazonS3SecretAccessKey: <AmazonS3SecretAccessKey>,
                AmazonS3Bucket:          <AmazonS3Bucket>,
                AmazonS3Endpoint:        <AmazonS3Endpoint>
              },
            }

            // TestS3Connection
            ok, resp := Client.TestS3Connection(&config)
  /config:
    get:
      tags:
        - system
      summary: Get configuration
      description: |
        Retrieve the current server configuration
        ##### Permissions
        Must have `manage_system` permission.
      responses:
        "200":
          description: Configuration retrieval successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Config"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
      x-code-samples:
        - lang: Go
          source: |
            import "github.com/mattermost/mattermost-server/model"

            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // GetConfig
            config, resp := Client.GetConfig()
    put:
      tags:
        - system
      summary: Update configuration
      description: >
        Submit a new configuration for the server to use. As of server version
        4.8, the `PluginSettings.EnableUploads` setting cannot be modified by
        this endpoint.

        ##### Permissions

        Must have `manage_system` permission.
      requestBody:
        description: Mattermost configuration
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Config"
      responses:
        "200":
          description: Configuration update successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Config"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
      x-code-samples:
        - lang: Go
          source: |
            import "github.com/mattermost/mattermost-server/model"

            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // GetConfig
            config, resp := Client.GetConfig()

            config.TeamSettings.SiteName = "MyFancyName"

            // UpdateConfig
            updatedConfig, resp := Client.UpdateConfig(config)
  /config/reload:
    post:
      tags:
        - system
      summary: Reload configuration
      description: |
        Reload the configuration file to pick up on any changes made to it.
        ##### Permissions
        Must have `manage_system` permission.
      responses:
        "200":
          description: Configuration reload successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOK"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
      x-code-samples:
        - lang: Go
          source: |
            import "github.com/mattermost/mattermost-server/model"

            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // ReloadConfig
            ok, resp := Client.ReloadConfig()
  /config/client:
    get:
      tags:
        - system
      summary: Get client configuration
      description: |
        Get a subset of the server configuration needed by the client.
        ##### Permissions
        No permission required.
      parameters:
        - name: format
          in: query
          required: true
          description: Must be `old`, other formats not implemented yet
          schema:
            type: string
      responses:
        "200":
          description: Configuration retrieval successful
        "400":
          $ref: "#/components/responses/BadRequest"
        "501":
          $ref: "#/components/responses/NotImplemented"
      x-code-samples:
        - lang: Go
          source: |
            import "github.com/mattermost/mattermost-server/model"

            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // GetOldClientConfig
            ok, resp := Client.GetOldClientConfig()
  /config/environment:
    get:
      tags:
        - system
      summary: Get configuration made through environment variables
      description: >
        Retrieve a json object mirroring the server configuration where fields
        are set to true

        if the corresponding config setting is set through an environment variable. Settings

        that haven't been set through environment variables will be missing from the object.


        __Minimum server version__: 4.10


        ##### Permissions

        Must have `manage_system` permission.
      responses:
        "200":
          description: Configuration retrieval successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnvironmentConfig"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /config/patch:
    put:
      tags:
        - system
      summary: Patch configuration
      description: >
        Submit configuration to patch. As of server version 4.8, the
        `PluginSettings.EnableUploads` setting cannot be modified by this
        endpoint.

        ##### Permissions

        Must have `manage_system` permission.

        __Minimum server version__: 5.20
      requestBody:
        description: Mattermost configuration
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Config"
      responses:
        "200":
          description: Configuration update successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Config"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
      x-code-samples:
        - lang: Go
          source: |
            import "github.com/mattermost/mattermost-server/model"

            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // GetConfig
            config, resp := Client.GetConfig()

            config.TeamSettings.SiteName = "MyFancyName"

            // UpdateConfig
            updatedConfig, resp := Client.PatchConfig(config)
  /license:
    post:
      tags:
        - system
      summary: Upload license file
      description: |
        Upload a license to enable enterprise features.

        __Minimum server version__: 4.0

        ##### Permissions
        Must have `manage_system` permission.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                license:
                  description: The license to be uploaded
                  type: string
                  format: binary
              required:
                - license
      responses:
        "201":
          description: License file upload successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOK"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "413":
          $ref: "#/components/responses/TooLarge"
      x-code-samples:
        - lang: Go
          source: |
            import "github.com/mattermost/mattermost-server/model"

            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            file, err := os.Open("<Your license file>")
            if err != nil {
              return err
            }
            defer file.Close()

            data := &bytes.Buffer{}
            if _, err := io.Copy(data, file); err != nil {
              return err
            }

            ok, resp := Client.UploadLicenseFile(data.Bytes())
    delete:
      tags:
        - system
      summary: Remove license file
      description: >
        Remove the license file from the server. This will disable all
        enterprise features.


        __Minimum server version__: 4.0


        ##### Permissions

        Must have `manage_system` permission.
      responses:
        "200":
          description: License removal successful
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /license/client:
    get:
      tags:
        - system
      summary: Get client license
      description: >
        Get a subset of the server license needed by the client.

        ##### Permissions

        No permission required but having the `manage_system` permission returns more information.
      parameters:
        - name: format
          in: query
          required: true
          description: Must be `old`, other formats not implemented yet
          schema:
            type: string
      responses:
        "200":
          description: License retrieval successful
        "400":
          $ref: "#/components/responses/BadRequest"
        "501":
          $ref: "#/components/responses/NotImplemented"
      x-code-samples:
        - lang: Go
          source: |
            import "github.com/mattermost/mattermost-server/model"

            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // GetOldClientLicense
            license, resp := Client.GetOldClientLicense()
  /audits:
    get:
      tags:
        - system
      summary: Get audits
      description: >
        Get a page of audits for all users on the system, selected with `page`
        and `per_page` query parameters.

        ##### Permissions

        Must have `manage_system` permission.
      parameters:
        - name: page
          in: query
          description: The page to select.
          schema:
            type: integer
            default: 0
        - name: per_page
          in: query
          description: The number of audits per page.
          schema:
            type: integer
            default: 60
      responses:
        "200":
          description: Audits retrieval successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Audit"
        "403":
          $ref: "#/components/responses/Forbidden"
      x-code-samples:
        - lang: Go
          source: |
            import "github.com/mattermost/mattermost-server/model"

            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // GetAudits
            audits, resp := Client.GetAudits(0, 100, "")
  /caches/invalidate:
    post:
      tags:
        - system
      summary: Invalidate all the caches
      description: >
        Purge all the in-memory caches for the Mattermost server. This can have
        a temporary negative effect on performance while the caches are
        re-populated.

        ##### Permissions

        Must have `manage_system` permission.
      responses:
        "200":
          description: Caches invalidate successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOK"
        "403":
          $ref: "#/components/responses/Forbidden"
      x-code-samples:
        - lang: Go
          source: |
            import "github.com/mattermost/mattermost-server/model"

            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // InvalidateCaches
            ok, resp := Client.InvalidateCaches()
  /logs:
    get:
      tags:
        - system
      summary: Get logs
      description: >
        Get a page of server logs, selected with `page` and `logs_per_page`
        query parameters.

        ##### Permissions

        Must have `manage_system` permission.
      parameters:
        - name: page
          in: query
          description: The page to select.
          schema:
            type: integer
            default: 0
        - name: logs_per_page
          in: query
          description: The number of logs per page. There is a maximum limit of 10000 logs
            per page.
          schema:
            type: string
            default: "10000"
      responses:
        "200":
          description: Logs retrieval successful
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "403":
          $ref: "#/components/responses/Forbidden"
      x-code-samples:
        - lang: Go
          source: |
            import "github.com/mattermost/mattermost-server/model"

            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // GetLogs
            logs, resp := Client.GetLogs(0, 10)
    post:
      tags:
        - system
      summary: Add log message
      description: >
        Add log messages to the server logs.

        ##### Permissions

        Users with `manage_system` permission can log ERROR or DEBUG messages.

        Logged in users can log ERROR or DEBUG messages when `ServiceSettings.EnableDeveloper` is `true` or just DEBUG messages when `false`.

        Non-logged in users can log ERROR or DEBUG messages when `ServiceSettings.EnableDeveloper` is `true` and cannot log when `false`.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - level
                - message
              properties:
                level:
                  type: string
                  description: The error level, ERROR or DEBUG
                message:
                  type: string
                  description: Message to send to the server logs
        required: true
      responses:
        "200":
          description: Logs sent successful
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
        "403":
          $ref: "#/components/responses/Forbidden"
      x-code-samples:
        - lang: Go
          source: |
            import "github.com/mattermost/mattermost-server/model"

            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            message := make(map[string]string)
            message["level"] = "ERROR"
            message["message"] = "this is a test"

            // PostLog
            _, resp := Client.PostLog(message)
  /analytics/old:
    get:
      tags:
        - system
      summary: Get analytics
      description: >
        Get some analytics data about the system. This endpoint uses the old
        format, the `/analytics` route is reserved for the new format when it
        gets implemented.


        The returned JSON changes based on the `name` query parameter but is always key/value pairs.


        __Minimum server version__: 4.0


        ##### Permissions

        Must have `manage_system` permission.
      parameters:
        - name: name
          in: query
          required: false
          description: Possible values are "standard", "post_counts_day",
            "user_counts_with_posts_day" or "extra_counts"
          schema:
            type: string
            default: standard
        - name: team_id
          in: query
          required: false
          description: The team ID to filter the data by
          schema:
            type: string
      responses:
        "200":
          description: Analytics retrieval successful
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /server_busy:
    post:
      tags:
        - system
      summary: Set the server busy (high load) flag
      description: >
        Marks the server as currently having high load which disables
        non-critical services such as search, statuses and typing notifications.


        __Minimum server version__: 5.20


        ##### Permissions

        Must have `manage_system` permission.
      parameters:
        - name: seconds
          in: query
          required: false
          description: Number of seconds until server is automatically marked as not busy.
          schema:
            type: string
            default: "3600"
      responses:
        "200":
          description: Server busy flag set successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOK"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
      x-code-samples:
        - lang: Go
          source: |
            import "github.com/mattermost/mattermost-server/model"

            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            ok, resp := Client.SetServerBusy(300)
        - lang: curl
          source: |
            curl -X POST \
              'http://your-mattermost-url.com/api/v4/server_busy?seconds=3600' \
              -H 'Authorization: Bearer kno8tcdotpbx3dj1gzcbx9jrqy'
    get:
      tags:
        - system
      summary: Get server busy expiry time.
      description: >
        Gets the timestamp corresponding to when the server busy flag will be
        automatically cleared. 


        __Minimum server version__: 5.20


        ##### Permissions

        Must have `manage_system` permission.
      responses:
        "200":
          description: Server busy expires timestamp retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Server_Busy"
        "403":
          $ref: "#/components/responses/Forbidden"
      x-code-samples:
        - lang: Go
          source: |
            import "github.com/mattermost/mattermost-server/model"

            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            // expires is a time.Time
            expires, resp := Client.GetServerBusyExpires()
        - lang: curl
          source: |
            curl -X GET \
              'http://your-mattermost-url.com/api/v4/server_busy' \
              -H 'Authorization: Bearer kno8tcdotpbx3dj1gzcbx9jrqy' \
              -H 'Content-Type: application/json'
    delete:
      tags:
        - system
      summary: Clears the server busy (high load) flag
      description: >
        Marks the server as not having high load which re-enables non-critical
        services such as search, statuses and typing notifications.


        __Minimum server version__: 5.20


        ##### Permissions

        Must have `manage_system` permission.
      responses:
        "200":
          description: Server busy flag cleared successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOK"
        "403":
          $ref: "#/components/responses/Forbidden"
      x-code-samples:
        - lang: Go
          source: |
            import "github.com/mattermost/mattermost-server/model"

            Client := model.NewAPIv4Client("https://your-mattermost-url.com")
            Client.Login("email@domain.com", "Password1")

            ok, resp := Client.ClearServerBusy()
        - lang: curl
          source: |
            curl -X DELETE \
              'http://your-mattermost-url.com/api/v4/server_busy' \
              -H 'Authorization: Bearer kno8tcdotpbx3dj1gzcbx9jrqy'
